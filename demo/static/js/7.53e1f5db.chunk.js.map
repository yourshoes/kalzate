{"version":3,"sources":["../../../node_modules/intl/lib/core.js","../../../node_modules/intl/index.js"],"names":["global","_typeof","Symbol","iterator","obj","constructor","jsx","REACT_ELEMENT_TYPE","for","type","props","key","children","defaultProps","childrenLength","arguments","length","propName","childArray","Array","i","$$typeof","undefined","ref","_owner","createClass","defineProperties","target","descriptor","enumerable","configurable","writable","Object","defineProperty","Constructor","protoProps","staticProps","prototype","defineProperty$1","value","_extends","assign","source","hasOwnProperty","call","selfGlobal","self","slicedToArray","arr","isArray","_arr","_n","_d","_e","_s","_i","next","done","push","err","sliceIterator","TypeError","babelHelpers$1","freeze","asyncToGenerator","fn","gen","apply","this","Promise","resolve","reject","step","arg","info","error","then","classCallCheck","instance","defineEnumerableProperties","descs","desc","defaults","_defaults","keys","getOwnPropertyNames","getOwnPropertyDescriptor","get","object","property","receiver","Function","parent","getPrototypeOf","getter","inherits","subClass","superClass","create","setPrototypeOf","__proto__","interopRequireDefault","__esModule","default","interopRequireWildcard","newObj","newArrowCheck","innerThis","boundThis","objectDestructuringEmpty","objectWithoutProperties","indexOf","possibleConstructorReturn","ReferenceError","set","setter","slicedToArrayLoose","_step","_iterator","taggedTemplateLiteral","strings","raw","taggedTemplateLiteralLoose","temporalRef","val","name","undef","temporalUndefined","toArray","from","toConsumableArray","arr2","typeof","extends","instanceof","left","right","hasInstance","realDefineProp","sentinel","a","e","es3","__defineGetter__","hop","arrIndexOf","search","t","max","objCreate","proto","F","k","arrSlice","slice","arrConcat","concat","arrPush","arrJoin","join","arrShift","shift","fnBind","bind","thisObj","args","internals","secret","Math","random","Record","List","createRegExpRestore","disableRegExpRestore","regExpCache","lastMatch","RegExp","leftContext","multiline","input","has","esc","lm","replace","reg","m","exprStr","match","expr","lastIndex","exec","toObject","toNumber","Number","toLength","len","number","isNaN","floor","abs","toInteger","Infinity","pow","min","getInternalProperties","__getInternalProperties","variant","extension","singleton","expBCP47Syntax","expVariantDupes","expSingletonDupes","expExtSequences","defaultLocale","redundantTags","tags","art-lojban","i-ami","i-bnn","i-hak","i-klingon","i-lux","i-navajo","i-pwn","i-tao","i-tay","i-tsu","no-bok","no-nyn","sgn-BE-FR","sgn-BE-NL","sgn-CH-DE","zh-guoyu","zh-hakka","zh-min-nan","zh-xiang","sgn-BR","sgn-CO","sgn-DE","sgn-DK","sgn-ES","sgn-FR","sgn-GB","sgn-GR","sgn-IE","sgn-IT","sgn-JP","sgn-MX","sgn-NI","sgn-NL","sgn-NO","sgn-PT","sgn-SE","sgn-US","sgn-ZA","zh-cmn","zh-cmn-Hans","zh-cmn-Hant","zh-gan","zh-wuu","zh-yue","subtags","BU","DD","FX","TP","YD","ZR","heploc","in","iw","ji","jw","mo","ayx","bjd","ccq","cjr","cka","cmk","drh","drw","gav","hrr","ibi","kgh","lcq","mst","myt","sca","tie","tkk","tlw","tnf","ybd","yma","extLang","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","aed","aen","afb","afg","ajp","apc","apd","arb","arq","ars","ary","arz","ase","asf","asp","asq","asw","auz","avl","ayh","ayl","ayn","ayp","bbz","bfi","bfk","bjn","bog","bqn","bqy","btj","bve","bvl","bvu","bzs","cdo","cds","cjy","cmn","coa","cpx","csc","csd","cse","csf","csg","csl","csn","csq","csr","czh","czo","doq","dse","dsl","dup","ecs","esl","esn","eso","eth","fcs","fse","fsl","fss","gan","gds","gom","gse","gsg","gsm","gss","gus","hab","haf","hak","hds","hji","hks","hos","hps","hsh","hsl","hsn","icl","ils","inl","ins","ise","isg","isr","jak","jax","jcs","jhs","jls","jos","jsl","jus","kgi","knn","kvb","kvk","kvr","kxd","lbs","lce","lcf","liw","lls","lsg","lsl","lso","lsp","lst","lsy","ltg","lvs","lzh","mdl","meo","mfa","mfb","mfs","mnp","mqg","mre","msd","msi","msr","mui","mzc","mzg","mzy","nan","nbs","ncs","nsi","nsl","nsp","nsr","nzs","okl","orn","ors","pel","pga","pks","prl","prz","psc","psd","pse","psg","psl","pso","psp","psr","pys","rms","rsi","rsl","sdl","sfb","sfs","sgg","sgx","shu","slf","sls","sqk","sqs","ssh","ssp","ssr","svk","swc","swh","swl","syy","tmw","tse","tsm","tsq","tss","tsy","tza","ugn","ugy","ukl","uks","urk","uzn","uzs","vgt","vkk","vkt","vsi","vsl","vsv","wuu","xki","xml","xmm","xms","yds","ysl","yue","zib","zlm","zmi","zsl","zsm","toLatinUpperCase","str","ch","charAt","toUpperCase","IsStructurallyValidLanguageTag","locale","test","CanonicalizeLanguageTag","parts","toLowerCase","split","sort","_max","expCurrencyCode","expUnicodeExSeq","CanonicalizeLocaleList","locales","seen","O","Pk","String","kValue","tag","RangeError","BestAvailableLocale","availableLocales","candidate","pos","lastIndexOf","substring","LookupMatcher","requestedLocales","availableLocale","noExtensionsLocale","result","extensionIndex","ResolveLocale","options","relevantExtensionKeys","localeData","r","foundLocale","BestFitMatcher","extensionSubtags","extensionSubtagsLength","supportedExtension","keyLocaleData","supportedExtensionAddition","keyPos","requestedValue","optionsValue","privateIndex","preExtension","postExtension","LookupSupportedLocales","subset","SupportedLocales","matcher","localeMatcher","P","BestFitSupportedLocales","GetOption","values","fallback","Boolean","GetNumberOption","minimum","maximum","Intl","ll","currencyMinorUnits","BHD","BYR","XOF","BIF","XAF","CLF","CLP","KMF","DJF","XPF","GNF","ISK","IQD","JPY","JOD","KRW","KWD","LYD","OMR","PYG","RWF","TND","UGX","UYI","VUV","VND","NumberFormatConstructor","numberFormat","internal","regexpRestore","opt","NumberFormat","dataLocale","s","c","currency","normalized","IsWellFormedCurrencyCode","cDigits","cd","mnid","mnfd","mxfdDefault","mxfd","mnsd","minimumSignificantDigits","mxsd","maximumSignificantDigits","g","stylePatterns","patterns","positivePattern","negativePattern","format","GetFormatNumber","InitializeNumberFormat","bf","FormatNumber","PartitionNumberPattern","x","nums","data","ild","symbols","latn","pattern","beginIndex","endIndex","nextIndex","Error","literal","[[type]]","[[value]]","p","n","isFinite","_n2","ToRawPrecision","ToRawFixed","numSys","digits","digit","integer","fraction","decimalSepIndex","groupSepSymbol","group","groups","pgSize","primaryGroupSize","sgSize","secondaryGroupSize","end","idx","start","integerGroup","decimalSepSymbol","decimal","infinity","plusSignSymbol","plusSign","minusSignSymbol","minusSign","percentSignSymbol","percentSign","currencies","_literal","_literal2","minPrecision","maxPrecision","log10","round","log","LOG10E","log10Floor","f","exp","LN10","cut","minInteger","minFraction","maxFraction","toFixed","int","b","[[availableLocales]]","[[relevantExtensionKeys]]","[[localeData]]","part","FormatNumberToParts","arab","arabext","bali","beng","deva","fullwide","gujr","guru","hanidec","khmr","knda","laoo","limb","mlym","mong","mymr","orya","tamldec","telu","thai","tibt","prop","expDTComponents","expPatternTrimmer","unwantedDTCs","dtKeys","tmKeys","isDateFormatOnly","isTimeFormatOnly","joinDateAndTimeFormats","dateFormatObj","timeFormatObj","o","_","j","computeFinalPatterns","formatObj","pattern12","extendedPattern","$0","expDTComponentsMeta","era","year","quarter","month","week","day","weekday","hour12","hour","minute","second","timeZoneName","createDateTimeFormat","skeleton","originalPattern","validSyntheticProps","numeric","2-digit","narrow","short","long","dateWidths","resolveDateString","ca","component","width","gregory","alts","resolved","DateTimeFormatConstructor","dateTimeFormat","ToDateTimeOptions","DateTimeFormat","tz","timeZone","dateTimeComponents","bestFormat","dataLocaleData","formats","toString","availableFormats","timeFormats","dateFormats","computed","timeRelatedFormats","dateRelatedFormats","full","medium","createDateTimeFormats","ToDateTimeFormats","bestScore","score","optionsProp","formatProp","optionsPropIndex","formatPropIndex","delta","BasicFormatMatcher","_hr","optionsPropNames","_bestFormat","propValue","_ref2","generateSyntheticFormat","_property","patternProp","BestFitFormatMatcher","_prop","hr12","hourNo0","GetFormatDateTime","InitializeDateTimeFormat","required","opt2","needDefaults","date","FormatDateTime","Date","now","CreateDateTimeParts","nf","useGrouping","nf2","minimumIntegerDigits","tm","calendar","d","[[weekday]]","[[era]]","[[year]]","[[month]]","[[day]]","[[hour]]","[[minute]]","[[second]]","[[inDST]]","ToLocalTime","index","calendars","fv","v","substr","FormatToPartsDateTime","ls","__localeSensitiveProtos","toLocaleString","toLocaleDateString","toLocaleTimeString","nu","setDefaultLocale","addLocaleData","module","exports","IntlPolyfill","__webpack_require__","__applyLocaleSensitivePrototypes"],"mappings":"2FAAA,SAAAA,GAEA,IAAAC,EAAA,oBAAAC,QAAA,kBAAAA,OAAAC,SAAA,SAAAC,GACA,cAAAA,GACC,SAAAA,GACD,OAAAA,GAAA,oBAAAF,QAAAE,EAAAC,cAAAH,OAAA,gBAAAE,GAGAE,EAAA,WACA,IAAAC,EAAA,oBAAAL,eAAAM,KAAAN,OAAAM,IAAA,wBACA,gBAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAJ,KAAAI,aACAC,EAAAC,UAAAC,OAAA,EAMA,GAJAN,GAAA,IAAAI,IACAJ,EAAA,IAGAA,GAAAG,EACA,QAAAI,KAAAJ,OACA,IAAAH,EAAAO,KACAP,EAAAO,GAAAJ,EAAAI,SAGKP,IACLA,EAAAG,GAAA,IAGA,OAAAC,EACAJ,EAAAE,gBACK,GAAAE,EAAA,GAGL,IAFA,IAAAI,EAAAC,MAAAL,GAEAM,EAAA,EAAqBA,EAAAN,EAAoBM,IACzCF,EAAAE,GAAAL,UAAAK,EAAA,GAGAV,EAAAE,SAAAM,EAGA,OACAG,SAAAd,EACAE,OACAE,SAAAW,IAAAX,EAAA,QAAAA,EACAY,IAAA,KACAb,QACAc,OAAA,OAtCA,GA8EAC,EAAA,WACA,SAAAC,EAAAC,EAAAjB,GACA,QAAAU,EAAA,EAAmBA,EAAAV,EAAAM,OAAkBI,IAAA,CACrC,IAAAQ,EAAAlB,EAAAU,GACAQ,EAAAC,WAAAD,EAAAC,aAAA,EACAD,EAAAE,cAAA,EACA,UAAAF,MAAAG,UAAA,GACAC,OAAAC,eAAAN,EAAAC,EAAAjB,IAAAiB,IAIA,gBAAAM,EAAAC,EAAAC,GAGA,OAFAD,GAAAT,EAAAQ,EAAAG,UAAAF,GACAC,GAAAV,EAAAQ,EAAAE,GACAF,GAdA,GA4CAI,EAAA,SAAAlC,EAAAO,EAAA4B,GAYA,OAXA5B,KAAAP,EACA4B,OAAAC,eAAA7B,EAAAO,EAAA,CACA4B,QACAV,YAAA,EACAC,cAAA,EACAC,UAAA,IAGA3B,EAAAO,GAAA4B,EAGAnC,GAGAoC,EAAAR,OAAAS,QAAA,SAAAd,GACA,QAAAP,EAAA,EAAiBA,EAAAL,UAAAC,OAAsBI,IAAA,CACvC,IAAAsB,EAAA3B,UAAAK,GAEA,QAAAT,KAAA+B,EACAV,OAAAK,UAAAM,eAAAC,KAAAF,EAAA/B,KACAgB,EAAAhB,GAAA+B,EAAA/B,IAKA,OAAAgB,GAyGAkB,EAAA,qBAAA7C,EAAA8C,KAAA9C,EAwBA+C,EAAA,WA2BA,gBAAAC,EAAA5B,GACA,GAAAD,MAAA8B,QAAAD,GACA,OAAAA,EACK,GAAA9C,OAAAC,YAAA6B,OAAAgB,GACL,OA9BA,SAAAA,EAAA5B,GACA,IAAA8B,EAAA,GACAC,GAAA,EACAC,GAAA,EACAC,OAAA/B,EAEA,IACA,QAAAgC,EAAAC,EAAAP,EAAA9C,OAAAC,cAA+CgD,GAAAG,EAAAC,EAAAC,QAAAC,QAC/CP,EAAAQ,KAAAJ,EAAAf,QAEAnB,GAAA8B,EAAAlC,SAAAI,GAH8E+B,GAAA,IAKzE,MAAAQ,GACLP,GAAA,EACAC,EAAAM,EACK,QACL,KACAR,GAAAI,EAAA,QAAAA,EAAA,SACO,QACP,GAAAH,EAAA,MAAAC,GAIA,OAAAH,EAOAU,CAAAZ,EAAA5B,GAEA,UAAAyC,UAAA,yDAjCA,GA+FAC,EAAA9B,OAAA+B,OAAA,CACAzD,MACA0D,iBA3UA,SAAAC,GACA,kBACA,IAAAC,EAAAD,EAAAE,MAAAC,KAAArD,WACA,WAAAsD,QAAA,SAAAC,EAAAC,GAqBA,OApBA,SAAAC,EAAA7D,EAAA8D,GACA,IACA,IAAAC,EAAAR,EAAAvD,GAAA8D,GACAlC,EAAAmC,EAAAnC,MACS,MAAAoC,GAET,YADAJ,EAAAI,GAIA,IAAAD,EAAAjB,KAGA,OAAAY,QAAAC,QAAA/B,GAAAqC,KAAA,SAAArC,GACA,OAAAiC,EAAA,OAAAjC,IACW,SAAAoB,GACX,OAAAa,EAAA,QAAAb,KALAW,EAAA/B,GAUAiC,CAAA,YAoTAK,eA/SA,SAAAC,EAAA5C,GACA,KAAA4C,aAAA5C,GACA,UAAA2B,UAAA,sCA8SApC,cACAsD,2BAzRA,SAAA3E,EAAA4E,GACA,QAAArE,KAAAqE,EAAA,CACA,IAAAC,EAAAD,EAAArE,GACAsE,EAAAnD,aAAAmD,EAAApD,YAAA,EACA,UAAAoD,MAAAlD,UAAA,GACAC,OAAAC,eAAA7B,EAAAO,EAAAsE,GAGA,OAAA7E,GAkRA8E,SA/QA,SAAA9E,EAAA+E,GAGA,IAFA,IAAAC,EAAApD,OAAAqD,oBAAAF,GAEA/D,EAAA,EAAiBA,EAAAgE,EAAApE,OAAiBI,IAAA,CAClC,IAAAT,EAAAyE,EAAAhE,GACAmB,EAAAP,OAAAsD,yBAAAH,EAAAxE,GAEA4B,KAAAT,mBAAAR,IAAAlB,EAAAO,IACAqB,OAAAC,eAAA7B,EAAAO,EAAA4B,GAIA,OAAAnC,GAoQA6B,eAAAK,EACAiD,IArOA,SAAAA,EAAAC,EAAAC,EAAAC,GACA,OAAAF,MAAAG,SAAAtD,WACA,IAAA4C,EAAAjD,OAAAsD,yBAAAE,EAAAC,GAEA,QAAAnE,IAAA2D,EAAA,CACA,IAAAW,EAAA5D,OAAA6D,eAAAL,GAEA,cAAAI,OACA,EAEAL,EAAAK,EAAAH,EAAAC,GAEG,aAAAT,EACH,OAAAA,EAAA1C,MAEA,IAAAuD,EAAAb,EAAAM,IAEA,YAAAjE,IAAAwE,EAIAA,EAAAlD,KAAA8C,QAJA,GAqNAK,SA7MA,SAAAC,EAAAC,GACA,uBAAAA,GAAA,OAAAA,EACA,UAAApC,UAAA,kEAAAoC,GAGAD,EAAA3D,UAAAL,OAAAkE,OAAAD,KAAA5D,UAAA,CACAhC,YAAA,CACAkC,MAAAyD,EACAnE,YAAA,EACAE,UAAA,EACAD,cAAA,KAGAmE,IAAAjE,OAAAmE,eAAAnE,OAAAmE,eAAAH,EAAAC,GAAAD,EAAAI,UAAAH,IAiMAI,sBAtLA,SAAAjG,GACA,OAAAA,KAAAkG,WAAAlG,EAAA,CACAmG,QAAAnG,IAqLAoG,uBAjLA,SAAApG,GACA,GAAAA,KAAAkG,WACA,OAAAlG,EAEA,IAAAqG,EAAA,GAEA,SAAArG,EACA,QAAAO,KAAAP,EACA4B,OAAAK,UAAAM,eAAAC,KAAAxC,EAAAO,KAAA8F,EAAA9F,GAAAP,EAAAO,IAKA,OADA8F,EAAAF,QAAAnG,EACAqG,GAqKAC,cAjKA,SAAAC,EAAAC,GACA,GAAAD,IAAAC,EACA,UAAA/C,UAAA,yCAgKAgD,yBA5JA,SAAAzG,GACA,SAAAA,EAAA,UAAAyD,UAAA,iCA4JAiD,wBAzJA,SAAA1G,EAAAgF,GACA,IAAAzD,EAAA,GAEA,QAAAP,KAAAhB,EACAgF,EAAA2B,QAAA3F,IAAA,GACAY,OAAAK,UAAAM,eAAAC,KAAAxC,EAAAgB,KACAO,EAAAP,GAAAhB,EAAAgB,IAGA,OAAAO,GAiJAqF,0BA9IA,SAAAlE,EAAAF,GACA,IAAAE,EACA,UAAAmE,eAAA,6DAGA,OAAArE,GAAA,kBAAAA,GAAA,oBAAAA,EAAAE,EAAAF,GA0IAC,aACAqE,IAtIA,SAAAA,EAAA1B,EAAAC,EAAAlD,EAAAmD,GACA,IAAAT,EAAAjD,OAAAsD,yBAAAE,EAAAC,GAEA,QAAAnE,IAAA2D,EAAA,CACA,IAAAW,EAAA5D,OAAA6D,eAAAL,GAEA,OAAAI,GACAsB,EAAAtB,EAAAH,EAAAlD,EAAAmD,QAEG,aAAAT,KAAAlD,SACHkD,EAAA1C,YACG,CACH,IAAA4E,EAAAlC,EAAAiC,SAEA5F,IAAA6F,GACAA,EAAAvE,KAAA8C,EAAAnD,GAIA,OAAAA,GAoHAQ,gBACAqE,mBA5EA,SAAApE,EAAA5B,GACA,GAAAD,MAAA8B,QAAAD,GACA,OAAAA,EACG,GAAA9C,OAAAC,YAAA6B,OAAAgB,GAAA,CAGH,IAFA,IAEAqE,EAFAnE,EAAA,GAEAoE,EAAAtE,EAAA9C,OAAAC,cAAuDkH,EAAAC,EAAA9D,QAAAC,OACvDP,EAAAQ,KAAA2D,EAAA9E,QAEAnB,GAAA8B,EAAAlC,SAAAI,KAGA,OAAA8B,EAEA,UAAAW,UAAA,yDA+DA0D,sBA3DA,SAAAC,EAAAC,GACA,OAAAzF,OAAA+B,OAAA/B,OAAAN,iBAAA8F,EAAA,CACAC,IAAA,CACAlF,MAAAP,OAAA+B,OAAA0D,QAyDAC,2BApDA,SAAAF,EAAAC,GAEA,OADAD,EAAAC,MACAD,GAmDAG,YAhDA,SAAAC,EAAAC,EAAAC,GACA,GAAAF,IAAAE,EACA,UAAAb,eAAAY,EAAA,wCAEA,OAAAD,GA6CAG,kBAzCA,GA0CAC,QAxCA,SAAAhF,GACA,OAAA7B,MAAA8B,QAAAD,KAAA7B,MAAA8G,KAAAjF,IAwCAkF,kBArCA,SAAAlF,GACA,GAAA7B,MAAA8B,QAAAD,GAAA,CACA,QAAA5B,EAAA,EAAA+G,EAAAhH,MAAA6B,EAAAhC,QAA6CI,EAAA4B,EAAAhC,OAAgBI,IAC7D+G,EAAA/G,GAAA4B,EAAA5B,GAGA,OAAA+G,EAEA,OAAAhH,MAAA8G,KAAAjF,IA8BAoF,OAAAnI,EACAoI,QAAA7F,EACA8F,WAhNA,SAAAC,EAAAC,GACA,aAAAA,GAAA,qBAAAtI,QAAAsI,EAAAtI,OAAAuI,aACAD,EAAAtI,OAAAuI,aAAAF,GAEAA,aAAAC,KA+MAE,EAAA,WACA,IAAAC,EAAA,aAEA,IASA,OARA3G,OAAAC,eAAA0G,EAAA,KACApD,IAAA,WACA,YAGAvD,OAAAC,eAAA0G,EAAA,aACA5G,UAAA,IAEA,IAAA4G,EAAAC,GAAAD,EAAAtG,qBAAAL,OACG,MAAA6G,GACH,UAdA,GAmBAC,GAAAJ,IAAA1G,OAAAK,UAAA0G,iBAEAC,EAAAhH,OAAAK,UAAAM,eAEAV,EAAAyG,EAAA1G,OAAAC,eAAA,SAAA7B,EAAAyH,EAAA5C,GACA,QAAAA,GAAA7E,EAAA2I,iBAAA3I,EAAA2I,iBAAAlB,EAAA5C,EAAAM,OAAkFyD,EAAApG,KAAAxC,EAAAyH,IAAA,UAAA5C,KAAA7E,EAAAyH,GAAA5C,EAAA1C,QAGlF0G,EAAA9H,MAAAkB,UAAA0E,SAAA,SAAAmC,GAEA,IAAAC,EAAA/E,KACA,IAAA+E,EAAAnI,OAAA,SAEA,QAAAI,EAAAL,UAAA,MAAAqI,EAAAD,EAAAnI,OAAiDI,EAAAgI,EAAShI,IAC1D,GAAA+H,EAAA/H,KAAA8H,EAAA,OAAA9H,EAGA,UAIAiI,EAAArH,OAAAkE,QAAA,SAAAoD,EAAA5I,GACA,IAAAN,EAEA,SAAAmJ,KAKA,QAAAC,KAHAD,EAAAlH,UAAAiH,EACAlJ,EAAA,IAAAmJ,EAEA7I,EACAsI,EAAApG,KAAAlC,EAAA8I,IAAAvH,EAAA7B,EAAAoJ,EAAA9I,EAAA8I,IAGA,OAAApJ,GAIAqJ,EAAAtI,MAAAkB,UAAAqH,MACAC,EAAAxI,MAAAkB,UAAAuH,OACAC,EAAA1I,MAAAkB,UAAAqB,KACAoG,EAAA3I,MAAAkB,UAAA0H,KACAC,EAAA7I,MAAAkB,UAAA4H,MAEAC,EAAAvE,SAAAtD,UAAA8H,MAAA,SAAAC,GACA,IAAAnG,EAAAG,KACAiG,EAAAZ,EAAA7G,KAAA7B,UAAA,GAGA,OAAAkD,EAAAjD,OACA,WACA,OAAAiD,EAAAE,MAAAiG,EAAAT,EAAA/G,KAAAyH,EAAAZ,EAAA7G,KAAA7B,eAUAuJ,EAAAjB,EAAA,MAEAkB,EAAAC,KAAAC,SAoBA,SAAAC,EAAAtK,GAEA,QAAAoJ,KAAApJ,GACAA,aAAAsK,GAAA1B,EAAApG,KAAAxC,EAAAoJ,KAAAvH,EAAAmC,KAAAoF,EAAA,CACAjH,MAAAnC,EAAAoJ,GACA3H,YAAA,EACAE,UAAA,EACAD,cAAA,IAUA,SAAA6I,IACA1I,EAAAmC,KAAA,UACArC,UAAA,EACAQ,MAAA,IAEAxB,UAAAC,QAAA6I,EAAA1F,MAAAC,KAAAqF,EAAA7G,KAAA7B,YAQA,SAAA6J,IACA,GAAAN,EAAAO,qBACA,oBAaA,IARA,IAAAC,EAAA,CACAC,UAAAC,OAAAD,WAAA,GACAE,YAAAD,OAAAC,YACAC,UAAAF,OAAAE,UACAC,MAAAH,OAAAG,OAEAC,GAAA,EAEAhK,EAAA,EAAiBA,GAAA,EAAQA,IACzBgK,GAAAN,EAAA,IAAA1J,GAAA4J,OAAA,IAAA5J,KAAAgK,EAGA,kBAEA,IAAAC,EAAA,uBACAC,EAAAR,EAAAC,UAAAQ,QAAAF,EAAA,QACAG,EAAA,IAAAb,EAEA,GAAAS,EACA,QAAA7H,EAAA,EAAsBA,GAAA,EAASA,IAAA,CAC/B,IAAAkI,EAAAX,EAAA,IAAAvH,GAEAkI,GAEAA,IAAAF,QAAAF,EAAA,QACAC,IAAAC,QAAAE,EAAA,IAAAA,EAAA,MAHAH,EAAA,KAAAA,EAMAzB,EAAAjH,KAAA4I,EAAAF,EAAA5B,MAAA,EAAA4B,EAAAvE,QAAA,SACAuE,IAAA5B,MAAA4B,EAAAvE,QAAA,QAIA,IAAA2E,EAAA5B,EAAAlH,KAAA4I,EAAA,IAAAF,EAMAI,IAAAH,QAAA,+BAAAI,GACA,kBAAuBA,EAAAJ,QAAA,SAAAvK,OAAA,MAGvB,IAAA4K,EAAA,IAAAZ,OAAAU,EAAAZ,EAAAI,UAAA,UAGAU,EAAAC,UAAAf,EAAAG,YAAAjK,OACA4K,EAAAE,KAAAhB,EAAAK,QAQA,SAAAY,EAAAtH,GACA,UAAAA,EAAA,UAAAZ,UAAA,8CACA,uCAAAY,EAAA,YAAAX,EAAA,OAAAW,MACAzC,OAAAyC,GAGA,SAAAuH,EAAAvH,GACA,wBAAAA,IACAwH,OAAAxH,GAWA,SAAAyH,EAAAzH,GACA,IAAA0H,EATA,SAAA1H,GACA,IAAA2H,EAAAJ,EAAAvH,GACA,OAAA4H,MAAAD,GAAA,EACA,IAAAA,IAAA,IAAAA,OAAA,KAAAA,KAAA,IAAAA,EACAA,EAAA,KAAA5B,KAAA8B,MAAA9B,KAAA+B,IAAAH,IACA5B,KAAA8B,MAAA9B,KAAA+B,IAAAH,IAIAI,CAAA/H,GACA,OAAA0H,GAAA,IACAA,IAAAM,IAAAjC,KAAAkC,IAAA,QACAlC,KAAAmC,IAAAR,EAAA3B,KAAAkC,IAAA,SAOA,SAAAE,EAAAxM,GACA,OAAA4I,EAAApG,KAAAxC,EAAA,2BAAAA,EAAAyM,wBAAAtC,GACAlB,EAAA,MAhHAqB,EAAArI,UAAAgH,EAAA,MAaAsB,EAAAtI,UAAAgH,EAAA,MA6GA,IAcAyD,EAAA,mCAUAC,EAAAC,iCA4CAC,EAAAjC,OAAA,sbAEAkC,EAAAlC,OAAA,cAAA8B,EAAA,+BAAqE,KAErEK,EAAAnC,OAAA,sDAEAoC,EAAApC,OAAA,IAAA+B,EAAA,MAEAM,OAAA,EAOA,IAAAC,EAAA,CACAC,KAAA,CACAC,aAAA,MACAC,QAAA,MACAC,QAAA,MACAC,QAAA,MACAC,YAAA,MACAC,QAAA,KACAC,WAAA,KACAC,QAAA,MACAC,QAAA,MACAC,QAAA,MACAC,QAAA,MACAC,SAAA,KACAC,SAAA,KACAC,YAAA,MACAC,YAAA,MACAC,YAAA,MACAC,WAAA,MACAC,WAAA,MACAC,aAAA,MACAC,WAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,SAAA,MACAC,cAAA,WACAC,cAAA,WACAC,SAAA,MACAC,SAAA,MACAC,SAAA,OAEAC,QAAA,CACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,OAAA,UACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,OAEAC,QAAA,CACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAvR,IAAA,aACAwR,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACArO,IAAA,aACAsO,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,aACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,cACAC,IAAA,aACAC,IAAA,cACAC,IAAA,c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","file":"static/js/7.53e1f5db.chunk.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\nvar jsx = function () {\n  var REACT_ELEMENT_TYPE = typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\") || 0xeac7;\n  return function createRawReactElement(type, props, key, children) {\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {};\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  };\n}();\n\nvar asyncToGenerator = function asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            return step(\"next\", value);\n          }, function (err) {\n            return step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineEnumerableProperties = function defineEnumerableProperties(obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n\n  return obj;\n};\n\nvar defaults = function defaults(obj, _defaults) {\n  var keys = Object.getOwnPropertyNames(_defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(_defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n};\n\nvar defineProperty$1 = function defineProperty$1(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar _instanceof = function _instanceof(left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n};\n\nvar interopRequireDefault = function interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n};\n\nvar interopRequireWildcard = function interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n};\n\nvar newArrowCheck = function newArrowCheck(innerThis, boundThis) {\n  if (innerThis !== boundThis) {\n    throw new TypeError(\"Cannot instantiate an arrow function\");\n  }\n};\n\nvar objectDestructuringEmpty = function objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar selfGlobal = typeof global === \"undefined\" ? self : global;\n\nvar set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar slicedToArrayLoose = function slicedToArrayLoose(arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    var _arr = [];\n\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n};\n\nvar taggedTemplateLiteral = function taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nvar taggedTemplateLiteralLoose = function taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nvar temporalRef = function temporalRef(val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  } else {\n    return val;\n  }\n};\n\nvar temporalUndefined = {};\n\nvar toArray = function toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nvar toConsumableArray = function toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar babelHelpers$1 = Object.freeze({\n  jsx: jsx,\n  asyncToGenerator: asyncToGenerator,\n  classCallCheck: classCallCheck,\n  createClass: createClass,\n  defineEnumerableProperties: defineEnumerableProperties,\n  defaults: defaults,\n  defineProperty: defineProperty$1,\n  get: get,\n  inherits: inherits,\n  interopRequireDefault: interopRequireDefault,\n  interopRequireWildcard: interopRequireWildcard,\n  newArrowCheck: newArrowCheck,\n  objectDestructuringEmpty: objectDestructuringEmpty,\n  objectWithoutProperties: objectWithoutProperties,\n  possibleConstructorReturn: possibleConstructorReturn,\n  selfGlobal: selfGlobal,\n  set: set,\n  slicedToArray: slicedToArray,\n  slicedToArrayLoose: slicedToArrayLoose,\n  taggedTemplateLiteral: taggedTemplateLiteral,\n  taggedTemplateLiteralLoose: taggedTemplateLiteralLoose,\n  temporalRef: temporalRef,\n  temporalUndefined: temporalUndefined,\n  toArray: toArray,\n  toConsumableArray: toConsumableArray,\n  typeof: _typeof,\n  extends: _extends,\n  instanceof: _instanceof\n});\n\nvar realDefineProp = function () {\n  var sentinel = function sentinel() {};\n\n  try {\n    Object.defineProperty(sentinel, 'a', {\n      get: function get() {\n        return 1;\n      }\n    });\n    Object.defineProperty(sentinel, 'prototype', {\n      writable: false\n    });\n    return sentinel.a === 1 && sentinel.prototype instanceof Object;\n  } catch (e) {\n    return false;\n  }\n}(); // Need a workaround for getters in ES3\n\n\nvar es3 = !realDefineProp && !Object.prototype.__defineGetter__; // We use this a lot (and need it for proto-less objects)\n\nvar hop = Object.prototype.hasOwnProperty; // Naive defineProperty for compatibility\n\nvar defineProperty = realDefineProp ? Object.defineProperty : function (obj, name, desc) {\n  if ('get' in desc && obj.__defineGetter__) obj.__defineGetter__(name, desc.get);else if (!hop.call(obj, name) || 'value' in desc) obj[name] = desc.value;\n}; // Array.prototype.indexOf, as good as we need it to be\n\nvar arrIndexOf = Array.prototype.indexOf || function (search) {\n  /*jshint validthis:true */\n  var t = this;\n  if (!t.length) return -1;\n\n  for (var i = arguments[1] || 0, max = t.length; i < max; i++) {\n    if (t[i] === search) return i;\n  }\n\n  return -1;\n}; // Create an object with the specified prototype (2nd arg required for Record)\n\n\nvar objCreate = Object.create || function (proto, props) {\n  var obj = void 0;\n\n  function F() {}\n\n  F.prototype = proto;\n  obj = new F();\n\n  for (var k in props) {\n    if (hop.call(props, k)) defineProperty(obj, k, props[k]);\n  }\n\n  return obj;\n}; // Snapshot some (hopefully still) native built-ins\n\n\nvar arrSlice = Array.prototype.slice;\nvar arrConcat = Array.prototype.concat;\nvar arrPush = Array.prototype.push;\nvar arrJoin = Array.prototype.join;\nvar arrShift = Array.prototype.shift; // Naive Function.prototype.bind for compatibility\n\nvar fnBind = Function.prototype.bind || function (thisObj) {\n  var fn = this,\n      args = arrSlice.call(arguments, 1); // All our (presently) bound functions have either 1 or 0 arguments. By returning\n  // different function signatures, we can pass some tests in ES3 environments\n\n  if (fn.length === 1) {\n    return function () {\n      return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));\n    };\n  }\n\n  return function () {\n    return fn.apply(thisObj, arrConcat.call(args, arrSlice.call(arguments)));\n  };\n}; // Object housing internal properties for constructors\n\n\nvar internals = objCreate(null); // Keep internal properties internal\n\nvar secret = Math.random(); // Helper functions\n// ================\n\n/**\n * A function to deal with the inaccuracy of calculating log10 in pre-ES6\n * JavaScript environments. Math.log(num) / Math.LN10 was responsible for\n * causing issue #62.\n */\n\nfunction log10Floor(n) {\n  // ES6 provides the more accurate Math.log10\n  if (typeof Math.log10 === 'function') return Math.floor(Math.log10(n));\n  var x = Math.round(Math.log(n) * Math.LOG10E);\n  return x - (Number('1e' + x) > n);\n}\n/**\n * A map that doesn't contain Object in its prototype chain\n */\n\n\nfunction Record(obj) {\n  // Copy only own properties over unless this object is already a Record instance\n  for (var k in obj) {\n    if (obj instanceof Record || hop.call(obj, k)) defineProperty(this, k, {\n      value: obj[k],\n      enumerable: true,\n      writable: true,\n      configurable: true\n    });\n  }\n}\n\nRecord.prototype = objCreate(null);\n/**\n * An ordered list\n */\n\nfunction List() {\n  defineProperty(this, 'length', {\n    writable: true,\n    value: 0\n  });\n  if (arguments.length) arrPush.apply(this, arrSlice.call(arguments));\n}\n\nList.prototype = objCreate(null);\n/**\n * Constructs a regular expression to restore tainted RegExp properties\n */\n\nfunction createRegExpRestore() {\n  if (internals.disableRegExpRestore) {\n    return function () {\n      /* no-op */\n    };\n  }\n\n  var regExpCache = {\n    lastMatch: RegExp.lastMatch || '',\n    leftContext: RegExp.leftContext,\n    multiline: RegExp.multiline,\n    input: RegExp.input\n  },\n      has = false; // Create a snapshot of all the 'captured' properties\n\n  for (var i = 1; i <= 9; i++) {\n    has = (regExpCache['$' + i] = RegExp['$' + i]) || has;\n  }\n\n  return function () {\n    // Now we've snapshotted some properties, escape the lastMatch string\n    var esc = /[.?*+^$[\\]\\\\(){}|-]/g,\n        lm = regExpCache.lastMatch.replace(esc, '\\\\$&'),\n        reg = new List(); // If any of the captured strings were non-empty, iterate over them all\n\n    if (has) {\n      for (var _i = 1; _i <= 9; _i++) {\n        var m = regExpCache['$' + _i]; // If it's empty, add an empty capturing group\n\n        if (!m) lm = '()' + lm; // Else find the string in lm and escape & wrap it to capture it\n        else {\n            m = m.replace(esc, '\\\\$&');\n            lm = lm.replace(m, '(' + m + ')');\n          } // Push it to the reg and chop lm to make sure further groups come after\n\n        arrPush.call(reg, lm.slice(0, lm.indexOf('(') + 1));\n        lm = lm.slice(lm.indexOf('(') + 1);\n      }\n    }\n\n    var exprStr = arrJoin.call(reg, '') + lm; // Shorten the regex by replacing each part of the expression with a match\n    // for a string of that exact length.  This is safe for the type of\n    // expressions generated above, because the expression matches the whole\n    // match string, so we know each group and each segment between capturing\n    // groups can be matched by its length alone.\n\n    exprStr = exprStr.replace(/(\\\\\\(|\\\\\\)|[^()])+/g, function (match) {\n      return '[\\\\s\\\\S]{' + match.replace('\\\\', '').length + '}';\n    }); // Create the regular expression that will reconstruct the RegExp properties\n\n    var expr = new RegExp(exprStr, regExpCache.multiline ? 'gm' : 'g'); // Set the lastIndex of the generated expression to ensure that the match\n    // is found in the correct index.\n\n    expr.lastIndex = regExpCache.leftContext.length;\n    expr.exec(regExpCache.input);\n  };\n}\n/**\n * Mimics ES5's abstract ToObject() function\n */\n\n\nfunction toObject(arg) {\n  if (arg === null) throw new TypeError('Cannot convert null or undefined to object');\n  if ((typeof arg === 'undefined' ? 'undefined' : babelHelpers$1['typeof'](arg)) === 'object') return arg;\n  return Object(arg);\n}\n\nfunction toNumber(arg) {\n  if (typeof arg === 'number') return arg;\n  return Number(arg);\n}\n\nfunction toInteger(arg) {\n  var number = toNumber(arg);\n  if (isNaN(number)) return 0;\n  if (number === +0 || number === -0 || number === +Infinity || number === -Infinity) return number;\n  if (number < 0) return Math.floor(Math.abs(number)) * -1;\n  return Math.floor(Math.abs(number));\n}\n\nfunction toLength(arg) {\n  var len = toInteger(arg);\n  if (len <= 0) return 0;\n  if (len === Infinity) return Math.pow(2, 53) - 1;\n  return Math.min(len, Math.pow(2, 53) - 1);\n}\n/**\n * Returns \"internal\" properties for an object\n */\n\n\nfunction getInternalProperties(obj) {\n  if (hop.call(obj, '__getInternalProperties')) return obj.__getInternalProperties(secret);\n  return objCreate(null);\n}\n/**\n* Defines regular expressions for various operations related to the BCP 47 syntax,\n* as defined at http://tools.ietf.org/html/bcp47#section-2.1\n*/\n// extlang       = 3ALPHA              ; selected ISO 639 codes\n//                 *2(\"-\" 3ALPHA)      ; permanently reserved\n\n\nvar extlang = '[a-z]{3}(?:-[a-z]{3}){0,2}'; // language      = 2*3ALPHA            ; shortest ISO 639 code\n//                 [\"-\" extlang]       ; sometimes followed by\n//                                     ; extended language subtags\n//               / 4ALPHA              ; or reserved for future use\n//               / 5*8ALPHA            ; or registered language subtag\n\nvar language = '(?:[a-z]{2,3}(?:-' + extlang + ')?|[a-z]{4}|[a-z]{5,8})'; // script        = 4ALPHA              ; ISO 15924 code\n\nvar script = '[a-z]{4}'; // region        = 2ALPHA              ; ISO 3166-1 code\n//               / 3DIGIT              ; UN M.49 code\n\nvar region = '(?:[a-z]{2}|\\\\d{3})'; // variant       = 5*8alphanum         ; registered variants\n//               / (DIGIT 3alphanum)\n\nvar variant = '(?:[a-z0-9]{5,8}|\\\\d[a-z0-9]{3})'; //                                     ; Single alphanumerics\n//                                     ; \"x\" reserved for private use\n// singleton     = DIGIT               ; 0 - 9\n//               / %x41-57             ; A - W\n//               / %x59-5A             ; Y - Z\n//               / %x61-77             ; a - w\n//               / %x79-7A             ; y - z\n\nvar singleton = '[0-9a-wy-z]'; // extension     = singleton 1*(\"-\" (2*8alphanum))\n\nvar extension = singleton + '(?:-[a-z0-9]{2,8})+'; // privateuse    = \"x\" 1*(\"-\" (1*8alphanum))\n\nvar privateuse = 'x(?:-[a-z0-9]{1,8})+'; // irregular     = \"en-GB-oed\"         ; irregular tags do not match\n//               / \"i-ami\"             ; the 'langtag' production and\n//               / \"i-bnn\"             ; would not otherwise be\n//               / \"i-default\"         ; considered 'well-formed'\n//               / \"i-enochian\"        ; These tags are all valid,\n//               / \"i-hak\"             ; but most are deprecated\n//               / \"i-klingon\"         ; in favor of more modern\n//               / \"i-lux\"             ; subtags or subtag\n//               / \"i-mingo\"           ; combination\n//               / \"i-navajo\"\n//               / \"i-pwn\"\n//               / \"i-tao\"\n//               / \"i-tay\"\n//               / \"i-tsu\"\n//               / \"sgn-BE-FR\"\n//               / \"sgn-BE-NL\"\n//               / \"sgn-CH-DE\"\n\nvar irregular = '(?:en-GB-oed' + '|i-(?:ami|bnn|default|enochian|hak|klingon|lux|mingo|navajo|pwn|tao|tay|tsu)' + '|sgn-(?:BE-FR|BE-NL|CH-DE))'; // regular       = \"art-lojban\"        ; these tags match the 'langtag'\n//               / \"cel-gaulish\"       ; production, but their subtags\n//               / \"no-bok\"            ; are not extended language\n//               / \"no-nyn\"            ; or variant subtags: their meaning\n//               / \"zh-guoyu\"          ; is defined by their registration\n//               / \"zh-hakka\"          ; and all of these are deprecated\n//               / \"zh-min\"            ; in favor of a more modern\n//               / \"zh-min-nan\"        ; subtag or sequence of subtags\n//               / \"zh-xiang\"\n\nvar regular = '(?:art-lojban|cel-gaulish|no-bok|no-nyn' + '|zh-(?:guoyu|hakka|min|min-nan|xiang))'; // grandfathered = irregular           ; non-redundant tags registered\n//               / regular             ; during the RFC 3066 era\n\nvar grandfathered = '(?:' + irregular + '|' + regular + ')'; // langtag       = language\n//                 [\"-\" script]\n//                 [\"-\" region]\n//                 *(\"-\" variant)\n//                 *(\"-\" extension)\n//                 [\"-\" privateuse]\n\nvar langtag = language + '(?:-' + script + ')?(?:-' + region + ')?(?:-' + variant + ')*(?:-' + extension + ')*(?:-' + privateuse + ')?'; // Language-Tag  = langtag             ; normal language tags\n//               / privateuse          ; private use tag\n//               / grandfathered       ; grandfathered tags\n\nvar expBCP47Syntax = RegExp('^(?:' + langtag + '|' + privateuse + '|' + grandfathered + ')$', 'i'); // Match duplicate variants in a language tag\n\nvar expVariantDupes = RegExp('^(?!x).*?-(' + variant + ')-(?:\\\\w{4,8}-(?!x-))*\\\\1\\\\b', 'i'); // Match duplicate singletons in a language tag (except in private use)\n\nvar expSingletonDupes = RegExp('^(?!x).*?-(' + singleton + ')-(?:\\\\w+-(?!x-))*\\\\1\\\\b', 'i'); // Match all extension sequences\n\nvar expExtSequences = RegExp('-' + extension, 'ig'); // Default locale is the first-added locale data for us\n\nvar defaultLocale = void 0;\n\nfunction setDefaultLocale(locale) {\n  defaultLocale = locale;\n} // IANA Subtag Registry redundant tag and subtag maps\n\n\nvar redundantTags = {\n  tags: {\n    \"art-lojban\": \"jbo\",\n    \"i-ami\": \"ami\",\n    \"i-bnn\": \"bnn\",\n    \"i-hak\": \"hak\",\n    \"i-klingon\": \"tlh\",\n    \"i-lux\": \"lb\",\n    \"i-navajo\": \"nv\",\n    \"i-pwn\": \"pwn\",\n    \"i-tao\": \"tao\",\n    \"i-tay\": \"tay\",\n    \"i-tsu\": \"tsu\",\n    \"no-bok\": \"nb\",\n    \"no-nyn\": \"nn\",\n    \"sgn-BE-FR\": \"sfb\",\n    \"sgn-BE-NL\": \"vgt\",\n    \"sgn-CH-DE\": \"sgg\",\n    \"zh-guoyu\": \"cmn\",\n    \"zh-hakka\": \"hak\",\n    \"zh-min-nan\": \"nan\",\n    \"zh-xiang\": \"hsn\",\n    \"sgn-BR\": \"bzs\",\n    \"sgn-CO\": \"csn\",\n    \"sgn-DE\": \"gsg\",\n    \"sgn-DK\": \"dsl\",\n    \"sgn-ES\": \"ssp\",\n    \"sgn-FR\": \"fsl\",\n    \"sgn-GB\": \"bfi\",\n    \"sgn-GR\": \"gss\",\n    \"sgn-IE\": \"isg\",\n    \"sgn-IT\": \"ise\",\n    \"sgn-JP\": \"jsl\",\n    \"sgn-MX\": \"mfs\",\n    \"sgn-NI\": \"ncs\",\n    \"sgn-NL\": \"dse\",\n    \"sgn-NO\": \"nsl\",\n    \"sgn-PT\": \"psr\",\n    \"sgn-SE\": \"swl\",\n    \"sgn-US\": \"ase\",\n    \"sgn-ZA\": \"sfs\",\n    \"zh-cmn\": \"cmn\",\n    \"zh-cmn-Hans\": \"cmn-Hans\",\n    \"zh-cmn-Hant\": \"cmn-Hant\",\n    \"zh-gan\": \"gan\",\n    \"zh-wuu\": \"wuu\",\n    \"zh-yue\": \"yue\"\n  },\n  subtags: {\n    BU: \"MM\",\n    DD: \"DE\",\n    FX: \"FR\",\n    TP: \"TL\",\n    YD: \"YE\",\n    ZR: \"CD\",\n    heploc: \"alalc97\",\n    'in': \"id\",\n    iw: \"he\",\n    ji: \"yi\",\n    jw: \"jv\",\n    mo: \"ro\",\n    ayx: \"nun\",\n    bjd: \"drl\",\n    ccq: \"rki\",\n    cjr: \"mom\",\n    cka: \"cmr\",\n    cmk: \"xch\",\n    drh: \"khk\",\n    drw: \"prs\",\n    gav: \"dev\",\n    hrr: \"jal\",\n    ibi: \"opa\",\n    kgh: \"kml\",\n    lcq: \"ppr\",\n    mst: \"mry\",\n    myt: \"mry\",\n    sca: \"hle\",\n    tie: \"ras\",\n    tkk: \"twm\",\n    tlw: \"weo\",\n    tnf: \"prs\",\n    ybd: \"rki\",\n    yma: \"lrr\"\n  },\n  extLang: {\n    aao: [\"aao\", \"ar\"],\n    abh: [\"abh\", \"ar\"],\n    abv: [\"abv\", \"ar\"],\n    acm: [\"acm\", \"ar\"],\n    acq: [\"acq\", \"ar\"],\n    acw: [\"acw\", \"ar\"],\n    acx: [\"acx\", \"ar\"],\n    acy: [\"acy\", \"ar\"],\n    adf: [\"adf\", \"ar\"],\n    ads: [\"ads\", \"sgn\"],\n    aeb: [\"aeb\", \"ar\"],\n    aec: [\"aec\", \"ar\"],\n    aed: [\"aed\", \"sgn\"],\n    aen: [\"aen\", \"sgn\"],\n    afb: [\"afb\", \"ar\"],\n    afg: [\"afg\", \"sgn\"],\n    ajp: [\"ajp\", \"ar\"],\n    apc: [\"apc\", \"ar\"],\n    apd: [\"apd\", \"ar\"],\n    arb: [\"arb\", \"ar\"],\n    arq: [\"arq\", \"ar\"],\n    ars: [\"ars\", \"ar\"],\n    ary: [\"ary\", \"ar\"],\n    arz: [\"arz\", \"ar\"],\n    ase: [\"ase\", \"sgn\"],\n    asf: [\"asf\", \"sgn\"],\n    asp: [\"asp\", \"sgn\"],\n    asq: [\"asq\", \"sgn\"],\n    asw: [\"asw\", \"sgn\"],\n    auz: [\"auz\", \"ar\"],\n    avl: [\"avl\", \"ar\"],\n    ayh: [\"ayh\", \"ar\"],\n    ayl: [\"ayl\", \"ar\"],\n    ayn: [\"ayn\", \"ar\"],\n    ayp: [\"ayp\", \"ar\"],\n    bbz: [\"bbz\", \"ar\"],\n    bfi: [\"bfi\", \"sgn\"],\n    bfk: [\"bfk\", \"sgn\"],\n    bjn: [\"bjn\", \"ms\"],\n    bog: [\"bog\", \"sgn\"],\n    bqn: [\"bqn\", \"sgn\"],\n    bqy: [\"bqy\", \"sgn\"],\n    btj: [\"btj\", \"ms\"],\n    bve: [\"bve\", \"ms\"],\n    bvl: [\"bvl\", \"sgn\"],\n    bvu: [\"bvu\", \"ms\"],\n    bzs: [\"bzs\", \"sgn\"],\n    cdo: [\"cdo\", \"zh\"],\n    cds: [\"cds\", \"sgn\"],\n    cjy: [\"cjy\", \"zh\"],\n    cmn: [\"cmn\", \"zh\"],\n    coa: [\"coa\", \"ms\"],\n    cpx: [\"cpx\", \"zh\"],\n    csc: [\"csc\", \"sgn\"],\n    csd: [\"csd\", \"sgn\"],\n    cse: [\"cse\", \"sgn\"],\n    csf: [\"csf\", \"sgn\"],\n    csg: [\"csg\", \"sgn\"],\n    csl: [\"csl\", \"sgn\"],\n    csn: [\"csn\", \"sgn\"],\n    csq: [\"csq\", \"sgn\"],\n    csr: [\"csr\", \"sgn\"],\n    czh: [\"czh\", \"zh\"],\n    czo: [\"czo\", \"zh\"],\n    doq: [\"doq\", \"sgn\"],\n    dse: [\"dse\", \"sgn\"],\n    dsl: [\"dsl\", \"sgn\"],\n    dup: [\"dup\", \"ms\"],\n    ecs: [\"ecs\", \"sgn\"],\n    esl: [\"esl\", \"sgn\"],\n    esn: [\"esn\", \"sgn\"],\n    eso: [\"eso\", \"sgn\"],\n    eth: [\"eth\", \"sgn\"],\n    fcs: [\"fcs\", \"sgn\"],\n    fse: [\"fse\", \"sgn\"],\n    fsl: [\"fsl\", \"sgn\"],\n    fss: [\"fss\", \"sgn\"],\n    gan: [\"gan\", \"zh\"],\n    gds: [\"gds\", \"sgn\"],\n    gom: [\"gom\", \"kok\"],\n    gse: [\"gse\", \"sgn\"],\n    gsg: [\"gsg\", \"sgn\"],\n    gsm: [\"gsm\", \"sgn\"],\n    gss: [\"gss\", \"sgn\"],\n    gus: [\"gus\", \"sgn\"],\n    hab: [\"hab\", \"sgn\"],\n    haf: [\"haf\", \"sgn\"],\n    hak: [\"hak\", \"zh\"],\n    hds: [\"hds\", \"sgn\"],\n    hji: [\"hji\", \"ms\"],\n    hks: [\"hks\", \"sgn\"],\n    hos: [\"hos\", \"sgn\"],\n    hps: [\"hps\", \"sgn\"],\n    hsh: [\"hsh\", \"sgn\"],\n    hsl: [\"hsl\", \"sgn\"],\n    hsn: [\"hsn\", \"zh\"],\n    icl: [\"icl\", \"sgn\"],\n    ils: [\"ils\", \"sgn\"],\n    inl: [\"inl\", \"sgn\"],\n    ins: [\"ins\", \"sgn\"],\n    ise: [\"ise\", \"sgn\"],\n    isg: [\"isg\", \"sgn\"],\n    isr: [\"isr\", \"sgn\"],\n    jak: [\"jak\", \"ms\"],\n    jax: [\"jax\", \"ms\"],\n    jcs: [\"jcs\", \"sgn\"],\n    jhs: [\"jhs\", \"sgn\"],\n    jls: [\"jls\", \"sgn\"],\n    jos: [\"jos\", \"sgn\"],\n    jsl: [\"jsl\", \"sgn\"],\n    jus: [\"jus\", \"sgn\"],\n    kgi: [\"kgi\", \"sgn\"],\n    knn: [\"knn\", \"kok\"],\n    kvb: [\"kvb\", \"ms\"],\n    kvk: [\"kvk\", \"sgn\"],\n    kvr: [\"kvr\", \"ms\"],\n    kxd: [\"kxd\", \"ms\"],\n    lbs: [\"lbs\", \"sgn\"],\n    lce: [\"lce\", \"ms\"],\n    lcf: [\"lcf\", \"ms\"],\n    liw: [\"liw\", \"ms\"],\n    lls: [\"lls\", \"sgn\"],\n    lsg: [\"lsg\", \"sgn\"],\n    lsl: [\"lsl\", \"sgn\"],\n    lso: [\"lso\", \"sgn\"],\n    lsp: [\"lsp\", \"sgn\"],\n    lst: [\"lst\", \"sgn\"],\n    lsy: [\"lsy\", \"sgn\"],\n    ltg: [\"ltg\", \"lv\"],\n    lvs: [\"lvs\", \"lv\"],\n    lzh: [\"lzh\", \"zh\"],\n    max: [\"max\", \"ms\"],\n    mdl: [\"mdl\", \"sgn\"],\n    meo: [\"meo\", \"ms\"],\n    mfa: [\"mfa\", \"ms\"],\n    mfb: [\"mfb\", \"ms\"],\n    mfs: [\"mfs\", \"sgn\"],\n    min: [\"min\", \"ms\"],\n    mnp: [\"mnp\", \"zh\"],\n    mqg: [\"mqg\", \"ms\"],\n    mre: [\"mre\", \"sgn\"],\n    msd: [\"msd\", \"sgn\"],\n    msi: [\"msi\", \"ms\"],\n    msr: [\"msr\", \"sgn\"],\n    mui: [\"mui\", \"ms\"],\n    mzc: [\"mzc\", \"sgn\"],\n    mzg: [\"mzg\", \"sgn\"],\n    mzy: [\"mzy\", \"sgn\"],\n    nan: [\"nan\", \"zh\"],\n    nbs: [\"nbs\", \"sgn\"],\n    ncs: [\"ncs\", \"sgn\"],\n    nsi: [\"nsi\", \"sgn\"],\n    nsl: [\"nsl\", \"sgn\"],\n    nsp: [\"nsp\", \"sgn\"],\n    nsr: [\"nsr\", \"sgn\"],\n    nzs: [\"nzs\", \"sgn\"],\n    okl: [\"okl\", \"sgn\"],\n    orn: [\"orn\", \"ms\"],\n    ors: [\"ors\", \"ms\"],\n    pel: [\"pel\", \"ms\"],\n    pga: [\"pga\", \"ar\"],\n    pks: [\"pks\", \"sgn\"],\n    prl: [\"prl\", \"sgn\"],\n    prz: [\"prz\", \"sgn\"],\n    psc: [\"psc\", \"sgn\"],\n    psd: [\"psd\", \"sgn\"],\n    pse: [\"pse\", \"ms\"],\n    psg: [\"psg\", \"sgn\"],\n    psl: [\"psl\", \"sgn\"],\n    pso: [\"pso\", \"sgn\"],\n    psp: [\"psp\", \"sgn\"],\n    psr: [\"psr\", \"sgn\"],\n    pys: [\"pys\", \"sgn\"],\n    rms: [\"rms\", \"sgn\"],\n    rsi: [\"rsi\", \"sgn\"],\n    rsl: [\"rsl\", \"sgn\"],\n    sdl: [\"sdl\", \"sgn\"],\n    sfb: [\"sfb\", \"sgn\"],\n    sfs: [\"sfs\", \"sgn\"],\n    sgg: [\"sgg\", \"sgn\"],\n    sgx: [\"sgx\", \"sgn\"],\n    shu: [\"shu\", \"ar\"],\n    slf: [\"slf\", \"sgn\"],\n    sls: [\"sls\", \"sgn\"],\n    sqk: [\"sqk\", \"sgn\"],\n    sqs: [\"sqs\", \"sgn\"],\n    ssh: [\"ssh\", \"ar\"],\n    ssp: [\"ssp\", \"sgn\"],\n    ssr: [\"ssr\", \"sgn\"],\n    svk: [\"svk\", \"sgn\"],\n    swc: [\"swc\", \"sw\"],\n    swh: [\"swh\", \"sw\"],\n    swl: [\"swl\", \"sgn\"],\n    syy: [\"syy\", \"sgn\"],\n    tmw: [\"tmw\", \"ms\"],\n    tse: [\"tse\", \"sgn\"],\n    tsm: [\"tsm\", \"sgn\"],\n    tsq: [\"tsq\", \"sgn\"],\n    tss: [\"tss\", \"sgn\"],\n    tsy: [\"tsy\", \"sgn\"],\n    tza: [\"tza\", \"sgn\"],\n    ugn: [\"ugn\", \"sgn\"],\n    ugy: [\"ugy\", \"sgn\"],\n    ukl: [\"ukl\", \"sgn\"],\n    uks: [\"uks\", \"sgn\"],\n    urk: [\"urk\", \"ms\"],\n    uzn: [\"uzn\", \"uz\"],\n    uzs: [\"uzs\", \"uz\"],\n    vgt: [\"vgt\", \"sgn\"],\n    vkk: [\"vkk\", \"ms\"],\n    vkt: [\"vkt\", \"ms\"],\n    vsi: [\"vsi\", \"sgn\"],\n    vsl: [\"vsl\", \"sgn\"],\n    vsv: [\"vsv\", \"sgn\"],\n    wuu: [\"wuu\", \"zh\"],\n    xki: [\"xki\", \"sgn\"],\n    xml: [\"xml\", \"sgn\"],\n    xmm: [\"xmm\", \"ms\"],\n    xms: [\"xms\", \"sgn\"],\n    yds: [\"yds\", \"sgn\"],\n    ysl: [\"ysl\", \"sgn\"],\n    yue: [\"yue\", \"zh\"],\n    zib: [\"zib\", \"sgn\"],\n    zlm: [\"zlm\", \"ms\"],\n    zmi: [\"zmi\", \"ms\"],\n    zsl: [\"zsl\", \"sgn\"],\n    zsm: [\"zsm\", \"ms\"]\n  }\n};\n/**\n * Convert only a-z to uppercase as per section 6.1 of the spec\n */\n\nfunction toLatinUpperCase(str) {\n  var i = str.length;\n\n  while (i--) {\n    var ch = str.charAt(i);\n    if (ch >= \"a\" && ch <= \"z\") str = str.slice(0, i) + ch.toUpperCase() + str.slice(i + 1);\n  }\n\n  return str;\n}\n/**\n * The IsStructurallyValidLanguageTag abstract operation verifies that the locale\n * argument (which must be a String value)\n *\n * - represents a well-formed BCP 47 language tag as specified in RFC 5646 section\n *   2.1, or successor,\n * - does not include duplicate variant subtags, and\n * - does not include duplicate singleton subtags.\n *\n * The abstract operation returns true if locale can be generated from the ABNF\n * grammar in section 2.1 of the RFC, starting with Language-Tag, and does not\n * contain duplicate variant or singleton subtags (other than as a private use\n * subtag). It returns false otherwise. Terminal value characters in the grammar are\n * interpreted as the Unicode equivalents of the ASCII octet values given.\n */\n\n\nfunction\n/* 6.2.2 */\nIsStructurallyValidLanguageTag(locale) {\n  // represents a well-formed BCP 47 language tag as specified in RFC 5646\n  if (!expBCP47Syntax.test(locale)) return false; // does not include duplicate variant subtags, and\n\n  if (expVariantDupes.test(locale)) return false; // does not include duplicate singleton subtags.\n\n  if (expSingletonDupes.test(locale)) return false;\n  return true;\n}\n/**\n * The CanonicalizeLanguageTag abstract operation returns the canonical and case-\n * regularized form of the locale argument (which must be a String value that is\n * a structurally valid BCP 47 language tag as verified by the\n * IsStructurallyValidLanguageTag abstract operation). It takes the steps\n * specified in RFC 5646 section 4.5, or successor, to bring the language tag\n * into canonical form, and to regularize the case of the subtags, but does not\n * take the steps to bring a language tag into “extlang form” and to reorder\n * variant subtags.\n\n * The specifications for extensions to BCP 47 language tags, such as RFC 6067,\n * may include canonicalization rules for the extension subtag sequences they\n * define that go beyond the canonicalization rules of RFC 5646 section 4.5.\n * Implementations are allowed, but not required, to apply these additional rules.\n */\n\n\nfunction\n/* 6.2.3 */\nCanonicalizeLanguageTag(locale) {\n  var match = void 0,\n      parts = void 0; // A language tag is in 'canonical form' when the tag is well-formed\n  // according to the rules in Sections 2.1 and 2.2\n  // Section 2.1 says all subtags use lowercase...\n\n  locale = locale.toLowerCase(); // ...with 2 exceptions: 'two-letter and four-letter subtags that neither\n  // appear at the start of the tag nor occur after singletons.  Such two-letter\n  // subtags are all uppercase (as in the tags \"en-CA-x-ca\" or \"sgn-BE-FR\") and\n  // four-letter subtags are titlecase (as in the tag \"az-Latn-x-latn\").\n\n  parts = locale.split('-');\n\n  for (var i = 1, max = parts.length; i < max; i++) {\n    // Two-letter subtags are all uppercase\n    if (parts[i].length === 2) parts[i] = parts[i].toUpperCase(); // Four-letter subtags are titlecase\n    else if (parts[i].length === 4) parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].slice(1); // Is it a singleton?\n      else if (parts[i].length === 1 && parts[i] !== 'x') break;\n  }\n\n  locale = arrJoin.call(parts, '-'); // The steps laid out in RFC 5646 section 4.5 are as follows:\n  // 1.  Extension sequences are ordered into case-insensitive ASCII order\n  //     by singleton subtag.\n\n  if ((match = locale.match(expExtSequences)) && match.length > 1) {\n    // The built-in sort() sorts by ASCII order, so use that\n    match.sort(); // Replace all extensions with the joined, sorted array\n\n    locale = locale.replace(RegExp('(?:' + expExtSequences.source + ')+', 'i'), arrJoin.call(match, ''));\n  } // 2.  Redundant or grandfathered tags are replaced by their 'Preferred-\n  //     Value', if there is one.\n\n\n  if (hop.call(redundantTags.tags, locale)) locale = redundantTags.tags[locale]; // 3.  Subtags are replaced by their 'Preferred-Value', if there is one.\n  //     For extlangs, the original primary language subtag is also\n  //     replaced if there is a primary language subtag in the 'Preferred-\n  //     Value'.\n\n  parts = locale.split('-');\n\n  for (var _i = 1, _max = parts.length; _i < _max; _i++) {\n    if (hop.call(redundantTags.subtags, parts[_i])) parts[_i] = redundantTags.subtags[parts[_i]];else if (hop.call(redundantTags.extLang, parts[_i])) {\n      parts[_i] = redundantTags.extLang[parts[_i]][0]; // For extlang tags, the prefix needs to be removed if it is redundant\n\n      if (_i === 1 && redundantTags.extLang[parts[1]][1] === parts[0]) {\n        parts = arrSlice.call(parts, _i++);\n        _max -= 1;\n      }\n    }\n  }\n\n  return arrJoin.call(parts, '-');\n}\n/**\n * The DefaultLocale abstract operation returns a String value representing the\n * structurally valid (6.2.2) and canonicalized (6.2.3) BCP 47 language tag for the\n * host environment’s current locale.\n */\n\n\nfunction\n/* 6.2.4 */\nDefaultLocale() {\n  return defaultLocale;\n} // Sect 6.3 Currency Codes\n// =======================\n\n\nvar expCurrencyCode = /^[A-Z]{3}$/;\n/**\n * The IsWellFormedCurrencyCode abstract operation verifies that the currency argument\n * (after conversion to a String value) represents a well-formed 3-letter ISO currency\n * code. The following steps are taken:\n */\n\nfunction\n/* 6.3.1 */\nIsWellFormedCurrencyCode(currency) {\n  // 1. Let `c` be ToString(currency)\n  var c = String(currency); // 2. Let `normalized` be the result of mapping c to upper case as described\n  //    in 6.1.\n\n  var normalized = toLatinUpperCase(c); // 3. If the string length of normalized is not 3, return false.\n  // 4. If normalized contains any character that is not in the range \"A\" to \"Z\"\n  //    (U+0041 to U+005A), return false.\n\n  if (expCurrencyCode.test(normalized) === false) return false; // 5. Return true\n\n  return true;\n}\n\nvar expUnicodeExSeq = /-u(?:-[0-9a-z]{2,8})+/gi; // See `extension` below\n\nfunction\n/* 9.2.1 */\nCanonicalizeLocaleList(locales) {\n  // The abstract operation CanonicalizeLocaleList takes the following steps:\n  // 1. If locales is undefined, then a. Return a new empty List\n  if (locales === undefined) return new List(); // 2. Let seen be a new empty List.\n\n  var seen = new List(); // 3. If locales is a String value, then\n  //    a. Let locales be a new array created as if by the expression new\n  //    Array(locales) where Array is the standard built-in constructor with\n  //    that name and locales is the value of locales.\n\n  locales = typeof locales === 'string' ? [locales] : locales; // 4. Let O be ToObject(locales).\n\n  var O = toObject(locales); // 5. Let lenValue be the result of calling the [[Get]] internal method of\n  //    O with the argument \"length\".\n  // 6. Let len be ToUint32(lenValue).\n\n  var len = toLength(O.length); // 7. Let k be 0.\n\n  var k = 0; // 8. Repeat, while k < len\n\n  while (k < len) {\n    // a. Let Pk be ToString(k).\n    var Pk = String(k); // b. Let kPresent be the result of calling the [[HasProperty]] internal\n    //    method of O with argument Pk.\n\n    var kPresent = (Pk in O); // c. If kPresent is true, then\n\n    if (kPresent) {\n      // i. Let kValue be the result of calling the [[Get]] internal\n      //     method of O with argument Pk.\n      var kValue = O[Pk]; // ii. If the type of kValue is not String or Object, then throw a\n      //     TypeError exception.\n\n      if (kValue === null || typeof kValue !== 'string' && (typeof kValue === \"undefined\" ? \"undefined\" : babelHelpers$1[\"typeof\"](kValue)) !== 'object') throw new TypeError('String or Object type expected'); // iii. Let tag be ToString(kValue).\n\n      var tag = String(kValue); // iv. If the result of calling the abstract operation\n      //     IsStructurallyValidLanguageTag (defined in 6.2.2), passing tag as\n      //     the argument, is false, then throw a RangeError exception.\n\n      if (!IsStructurallyValidLanguageTag(tag)) throw new RangeError(\"'\" + tag + \"' is not a structurally valid language tag\"); // v. Let tag be the result of calling the abstract operation\n      //    CanonicalizeLanguageTag (defined in 6.2.3), passing tag as the\n      //    argument.\n\n      tag = CanonicalizeLanguageTag(tag); // vi. If tag is not an element of seen, then append tag as the last\n      //     element of seen.\n\n      if (arrIndexOf.call(seen, tag) === -1) arrPush.call(seen, tag);\n    } // d. Increase k by 1.\n\n\n    k++;\n  } // 9. Return seen.\n\n\n  return seen;\n}\n/**\n * The BestAvailableLocale abstract operation compares the provided argument\n * locale, which must be a String value with a structurally valid and\n * canonicalized BCP 47 language tag, against the locales in availableLocales and\n * returns either the longest non-empty prefix of locale that is an element of\n * availableLocales, or undefined if there is no such element. It uses the\n * fallback mechanism of RFC 4647, section 3.4. The following steps are taken:\n */\n\n\nfunction\n/* 9.2.2 */\nBestAvailableLocale(availableLocales, locale) {\n  // 1. Let candidate be locale\n  var candidate = locale; // 2. Repeat\n\n  while (candidate) {\n    // a. If availableLocales contains an element equal to candidate, then return\n    // candidate.\n    if (arrIndexOf.call(availableLocales, candidate) > -1) return candidate; // b. Let pos be the character index of the last occurrence of \"-\"\n    // (U+002D) within candidate. If that character does not occur, return\n    // undefined.\n\n    var pos = candidate.lastIndexOf('-');\n    if (pos < 0) return; // c. If pos ≥ 2 and the character \"-\" occurs at index pos-2 of candidate,\n    //    then decrease pos by 2.\n\n    if (pos >= 2 && candidate.charAt(pos - 2) === '-') pos -= 2; // d. Let candidate be the substring of candidate from position 0, inclusive,\n    //    to position pos, exclusive.\n\n    candidate = candidate.substring(0, pos);\n  }\n}\n/**\n * The LookupMatcher abstract operation compares requestedLocales, which must be\n * a List as returned by CanonicalizeLocaleList, against the locales in\n * availableLocales and determines the best available language to meet the\n * request. The following steps are taken:\n */\n\n\nfunction\n/* 9.2.3 */\nLookupMatcher(availableLocales, requestedLocales) {\n  // 1. Let i be 0.\n  var i = 0; // 2. Let len be the number of elements in requestedLocales.\n\n  var len = requestedLocales.length; // 3. Let availableLocale be undefined.\n\n  var availableLocale = void 0;\n  var locale = void 0,\n      noExtensionsLocale = void 0; // 4. Repeat while i < len and availableLocale is undefined:\n\n  while (i < len && !availableLocale) {\n    // a. Let locale be the element of requestedLocales at 0-origined list\n    //    position i.\n    locale = requestedLocales[i]; // b. Let noExtensionsLocale be the String value that is locale with all\n    //    Unicode locale extension sequences removed.\n\n    noExtensionsLocale = String(locale).replace(expUnicodeExSeq, ''); // c. Let availableLocale be the result of calling the\n    //    BestAvailableLocale abstract operation (defined in 9.2.2) with\n    //    arguments availableLocales and noExtensionsLocale.\n\n    availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale); // d. Increase i by 1.\n\n    i++;\n  } // 5. Let result be a new Record.\n\n\n  var result = new Record(); // 6. If availableLocale is not undefined, then\n\n  if (availableLocale !== undefined) {\n    // a. Set result.[[locale]] to availableLocale.\n    result['[[locale]]'] = availableLocale; // b. If locale and noExtensionsLocale are not the same String value, then\n\n    if (String(locale) !== String(noExtensionsLocale)) {\n      // i. Let extension be the String value consisting of the first\n      //    substring of locale that is a Unicode locale extension sequence.\n      var extension = locale.match(expUnicodeExSeq)[0]; // ii. Let extensionIndex be the character position of the initial\n      //     \"-\" of the first Unicode locale extension sequence within locale.\n\n      var extensionIndex = locale.indexOf('-u-'); // iii. Set result.[[extension]] to extension.\n\n      result['[[extension]]'] = extension; // iv. Set result.[[extensionIndex]] to extensionIndex.\n\n      result['[[extensionIndex]]'] = extensionIndex;\n    }\n  } // 7. Else\n  else // a. Set result.[[locale]] to the value returned by the DefaultLocale abstract\n    //    operation (defined in 6.2.4).\n    result['[[locale]]'] = DefaultLocale(); // 8. Return result\n\n\n  return result;\n}\n/**\n * The BestFitMatcher abstract operation compares requestedLocales, which must be\n * a List as returned by CanonicalizeLocaleList, against the locales in\n * availableLocales and determines the best available language to meet the\n * request. The algorithm is implementation dependent, but should produce results\n * that a typical user of the requested locales would perceive as at least as\n * good as those produced by the LookupMatcher abstract operation. Options\n * specified through Unicode locale extension sequences must be ignored by the\n * algorithm. Information about such subsequences is returned separately.\n * The abstract operation returns a record with a [[locale]] field, whose value\n * is the language tag of the selected locale, which must be an element of\n * availableLocales. If the language tag of the request locale that led to the\n * selected locale contained a Unicode locale extension sequence, then the\n * returned record also contains an [[extension]] field whose value is the first\n * Unicode locale extension sequence, and an [[extensionIndex]] field whose value\n * is the index of the first Unicode locale extension sequence within the request\n * locale language tag.\n */\n\n\nfunction\n/* 9.2.4 */\nBestFitMatcher(availableLocales, requestedLocales) {\n  return LookupMatcher(availableLocales, requestedLocales);\n}\n/**\n * The ResolveLocale abstract operation compares a BCP 47 language priority list\n * requestedLocales against the locales in availableLocales and determines the\n * best available language to meet the request. availableLocales and\n * requestedLocales must be provided as List values, options as a Record.\n */\n\n\nfunction\n/* 9.2.5 */\nResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData) {\n  if (availableLocales.length === 0) {\n    throw new ReferenceError('No locale data has been provided for this object yet.');\n  } // The following steps are taken:\n  // 1. Let matcher be the value of options.[[localeMatcher]].\n\n\n  var matcher = options['[[localeMatcher]]'];\n  var r = void 0; // 2. If matcher is \"lookup\", then\n\n  if (matcher === 'lookup') // a. Let r be the result of calling the LookupMatcher abstract operation\n    //    (defined in 9.2.3) with arguments availableLocales and\n    //    requestedLocales.\n    r = LookupMatcher(availableLocales, requestedLocales); // 3. Else\n  else // a. Let r be the result of calling the BestFitMatcher abstract\n    //    operation (defined in 9.2.4) with arguments availableLocales and\n    //    requestedLocales.\n    r = BestFitMatcher(availableLocales, requestedLocales); // 4. Let foundLocale be the value of r.[[locale]].\n\n  var foundLocale = r['[[locale]]'];\n  var extensionSubtags = void 0,\n      extensionSubtagsLength = void 0; // 5. If r has an [[extension]] field, then\n\n  if (hop.call(r, '[[extension]]')) {\n    // a. Let extension be the value of r.[[extension]].\n    var extension = r['[[extension]]']; // b. Let split be the standard built-in function object defined in ES5,\n    //    15.5.4.14.\n\n    var split = String.prototype.split; // c. Let extensionSubtags be the result of calling the [[Call]] internal\n    //    method of split with extension as the this value and an argument\n    //    list containing the single item \"-\".\n\n    extensionSubtags = split.call(extension, '-'); // d. Let extensionSubtagsLength be the result of calling the [[Get]]\n    //    internal method of extensionSubtags with argument \"length\".\n\n    extensionSubtagsLength = extensionSubtags.length;\n  } // 6. Let result be a new Record.\n\n\n  var result = new Record(); // 7. Set result.[[dataLocale]] to foundLocale.\n\n  result['[[dataLocale]]'] = foundLocale; // 8. Let supportedExtension be \"-u\".\n\n  var supportedExtension = '-u'; // 9. Let i be 0.\n\n  var i = 0; // 10. Let len be the result of calling the [[Get]] internal method of\n  //     relevantExtensionKeys with argument \"length\".\n\n  var len = relevantExtensionKeys.length; // 11 Repeat while i < len:\n\n  while (i < len) {\n    // a. Let key be the result of calling the [[Get]] internal method of\n    //    relevantExtensionKeys with argument ToString(i).\n    var key = relevantExtensionKeys[i]; // b. Let foundLocaleData be the result of calling the [[Get]] internal\n    //    method of localeData with the argument foundLocale.\n\n    var foundLocaleData = localeData[foundLocale]; // c. Let keyLocaleData be the result of calling the [[Get]] internal\n    //    method of foundLocaleData with the argument key.\n\n    var keyLocaleData = foundLocaleData[key]; // d. Let value be the result of calling the [[Get]] internal method of\n    //    keyLocaleData with argument \"0\".\n\n    var value = keyLocaleData['0']; // e. Let supportedExtensionAddition be \"\".\n\n    var supportedExtensionAddition = ''; // f. Let indexOf be the standard built-in function object defined in\n    //    ES5, 15.4.4.14.\n\n    var indexOf = arrIndexOf; // g. If extensionSubtags is not undefined, then\n\n    if (extensionSubtags !== undefined) {\n      // i. Let keyPos be the result of calling the [[Call]] internal\n      //    method of indexOf with extensionSubtags as the this value and\n      // an argument list containing the single item key.\n      var keyPos = indexOf.call(extensionSubtags, key); // ii. If keyPos ≠ -1, then\n\n      if (keyPos !== -1) {\n        // 1. If keyPos + 1 < extensionSubtagsLength and the length of the\n        //    result of calling the [[Get]] internal method of\n        //    extensionSubtags with argument ToString(keyPos +1) is greater\n        //    than 2, then\n        if (keyPos + 1 < extensionSubtagsLength && extensionSubtags[keyPos + 1].length > 2) {\n          // a. Let requestedValue be the result of calling the [[Get]]\n          //    internal method of extensionSubtags with argument\n          //    ToString(keyPos + 1).\n          var requestedValue = extensionSubtags[keyPos + 1]; // b. Let valuePos be the result of calling the [[Call]]\n          //    internal method of indexOf with keyLocaleData as the\n          //    this value and an argument list containing the single\n          //    item requestedValue.\n\n          var valuePos = indexOf.call(keyLocaleData, requestedValue); // c. If valuePos ≠ -1, then\n\n          if (valuePos !== -1) {\n            // i. Let value be requestedValue.\n            value = requestedValue, // ii. Let supportedExtensionAddition be the\n            //     concatenation of \"-\", key, \"-\", and value.\n            supportedExtensionAddition = '-' + key + '-' + value;\n          }\n        } // 2. Else\n        else {\n            // a. Let valuePos be the result of calling the [[Call]]\n            // internal method of indexOf with keyLocaleData as the this\n            // value and an argument list containing the single item\n            // \"true\".\n            var _valuePos = indexOf(keyLocaleData, 'true'); // b. If valuePos ≠ -1, then\n\n\n            if (_valuePos !== -1) // i. Let value be \"true\".\n              value = 'true';\n          }\n      }\n    } // h. If options has a field [[<key>]], then\n\n\n    if (hop.call(options, '[[' + key + ']]')) {\n      // i. Let optionsValue be the value of options.[[<key>]].\n      var optionsValue = options['[[' + key + ']]']; // ii. If the result of calling the [[Call]] internal method of indexOf\n      //     with keyLocaleData as the this value and an argument list\n      //     containing the single item optionsValue is not -1, then\n\n      if (indexOf.call(keyLocaleData, optionsValue) !== -1) {\n        // 1. If optionsValue is not equal to value, then\n        if (optionsValue !== value) {\n          // a. Let value be optionsValue.\n          value = optionsValue; // b. Let supportedExtensionAddition be \"\".\n\n          supportedExtensionAddition = '';\n        }\n      }\n    } // i. Set result.[[<key>]] to value.\n\n\n    result['[[' + key + ']]'] = value; // j. Append supportedExtensionAddition to supportedExtension.\n\n    supportedExtension += supportedExtensionAddition; // k. Increase i by 1.\n\n    i++;\n  } // 12. If the length of supportedExtension is greater than 2, then\n\n\n  if (supportedExtension.length > 2) {\n    // a.\n    var privateIndex = foundLocale.indexOf(\"-x-\"); // b.\n\n    if (privateIndex === -1) {\n      // i.\n      foundLocale = foundLocale + supportedExtension;\n    } // c.\n    else {\n        // i.\n        var preExtension = foundLocale.substring(0, privateIndex); // ii.\n\n        var postExtension = foundLocale.substring(privateIndex); // iii.\n\n        foundLocale = preExtension + supportedExtension + postExtension;\n      } // d. asserting - skipping\n    // e.\n\n\n    foundLocale = CanonicalizeLanguageTag(foundLocale);\n  } // 13. Set result.[[locale]] to foundLocale.\n\n\n  result['[[locale]]'] = foundLocale; // 14. Return result.\n\n  return result;\n}\n/**\n * The LookupSupportedLocales abstract operation returns the subset of the\n * provided BCP 47 language priority list requestedLocales for which\n * availableLocales has a matching locale when using the BCP 47 Lookup algorithm.\n * Locales appear in the same order in the returned list as in requestedLocales.\n * The following steps are taken:\n */\n\n\nfunction\n/* 9.2.6 */\nLookupSupportedLocales(availableLocales, requestedLocales) {\n  // 1. Let len be the number of elements in requestedLocales.\n  var len = requestedLocales.length; // 2. Let subset be a new empty List.\n\n  var subset = new List(); // 3. Let k be 0.\n\n  var k = 0; // 4. Repeat while k < len\n\n  while (k < len) {\n    // a. Let locale be the element of requestedLocales at 0-origined list\n    //    position k.\n    var locale = requestedLocales[k]; // b. Let noExtensionsLocale be the String value that is locale with all\n    //    Unicode locale extension sequences removed.\n\n    var noExtensionsLocale = String(locale).replace(expUnicodeExSeq, ''); // c. Let availableLocale be the result of calling the\n    //    BestAvailableLocale abstract operation (defined in 9.2.2) with\n    //    arguments availableLocales and noExtensionsLocale.\n\n    var availableLocale = BestAvailableLocale(availableLocales, noExtensionsLocale); // d. If availableLocale is not undefined, then append locale to the end of\n    //    subset.\n\n    if (availableLocale !== undefined) arrPush.call(subset, locale); // e. Increment k by 1.\n\n    k++;\n  } // 5. Let subsetArray be a new Array object whose elements are the same\n  //    values in the same order as the elements of subset.\n\n\n  var subsetArray = arrSlice.call(subset); // 6. Return subsetArray.\n\n  return subsetArray;\n}\n/**\n * The BestFitSupportedLocales abstract operation returns the subset of the\n * provided BCP 47 language priority list requestedLocales for which\n * availableLocales has a matching locale when using the Best Fit Matcher\n * algorithm. Locales appear in the same order in the returned list as in\n * requestedLocales. The steps taken are implementation dependent.\n */\n\n\nfunction\n/*9.2.7 */\nBestFitSupportedLocales(availableLocales, requestedLocales) {\n  // ###TODO: implement this function as described by the specification###\n  return LookupSupportedLocales(availableLocales, requestedLocales);\n}\n/**\n * The SupportedLocales abstract operation returns the subset of the provided BCP\n * 47 language priority list requestedLocales for which availableLocales has a\n * matching locale. Two algorithms are available to match the locales: the Lookup\n * algorithm described in RFC 4647 section 3.4, and an implementation dependent\n * best-fit algorithm. Locales appear in the same order in the returned list as\n * in requestedLocales. The following steps are taken:\n */\n\n\nfunction\n/*9.2.8 */\nSupportedLocales(availableLocales, requestedLocales, options) {\n  var matcher = void 0,\n      subset = void 0; // 1. If options is not undefined, then\n\n  if (options !== undefined) {\n    // a. Let options be ToObject(options).\n    options = new Record(toObject(options)); // b. Let matcher be the result of calling the [[Get]] internal method of\n    //    options with argument \"localeMatcher\".\n\n    matcher = options.localeMatcher; // c. If matcher is not undefined, then\n\n    if (matcher !== undefined) {\n      // i. Let matcher be ToString(matcher).\n      matcher = String(matcher); // ii. If matcher is not \"lookup\" or \"best fit\", then throw a RangeError\n      //     exception.\n\n      if (matcher !== 'lookup' && matcher !== 'best fit') throw new RangeError('matcher should be \"lookup\" or \"best fit\"');\n    }\n  } // 2. If matcher is undefined or \"best fit\", then\n\n\n  if (matcher === undefined || matcher === 'best fit') // a. Let subset be the result of calling the BestFitSupportedLocales\n    //    abstract operation (defined in 9.2.7) with arguments\n    //    availableLocales and requestedLocales.\n    subset = BestFitSupportedLocales(availableLocales, requestedLocales); // 3. Else\n  else // a. Let subset be the result of calling the LookupSupportedLocales\n    //    abstract operation (defined in 9.2.6) with arguments\n    //    availableLocales and requestedLocales.\n    subset = LookupSupportedLocales(availableLocales, requestedLocales); // 4. For each named own property name P of subset,\n\n  for (var P in subset) {\n    if (!hop.call(subset, P)) continue; // a. Let desc be the result of calling the [[GetOwnProperty]] internal\n    //    method of subset with P.\n    // b. Set desc.[[Writable]] to false.\n    // c. Set desc.[[Configurable]] to false.\n    // d. Call the [[DefineOwnProperty]] internal method of subset with P, desc,\n    //    and true as arguments.\n\n    defineProperty(subset, P, {\n      writable: false,\n      configurable: false,\n      value: subset[P]\n    });\n  } // \"Freeze\" the array so no new elements can be added\n\n\n  defineProperty(subset, 'length', {\n    writable: false\n  }); // 5. Return subset\n\n  return subset;\n}\n/**\n * The GetOption abstract operation extracts the value of the property named\n * property from the provided options object, converts it to the required type,\n * checks whether it is one of a List of allowed values, and fills in a fallback\n * value if necessary.\n */\n\n\nfunction\n/*9.2.9 */\nGetOption(options, property, type, values, fallback) {\n  // 1. Let value be the result of calling the [[Get]] internal method of\n  //    options with argument property.\n  var value = options[property]; // 2. If value is not undefined, then\n\n  if (value !== undefined) {\n    // a. Assert: type is \"boolean\" or \"string\".\n    // b. If type is \"boolean\", then let value be ToBoolean(value).\n    // c. If type is \"string\", then let value be ToString(value).\n    value = type === 'boolean' ? Boolean(value) : type === 'string' ? String(value) : value; // d. If values is not undefined, then\n\n    if (values !== undefined) {\n      // i. If values does not contain an element equal to value, then throw a\n      //    RangeError exception.\n      if (arrIndexOf.call(values, value) === -1) throw new RangeError(\"'\" + value + \"' is not an allowed value for `\" + property + '`');\n    } // e. Return value.\n\n\n    return value;\n  } // Else return fallback.\n\n\n  return fallback;\n}\n/**\n * The GetNumberOption abstract operation extracts a property value from the\n * provided options object, converts it to a Number value, checks whether it is\n * in the allowed range, and fills in a fallback value if necessary.\n */\n\n\nfunction\n/* 9.2.10 */\nGetNumberOption(options, property, minimum, maximum, fallback) {\n  // 1. Let value be the result of calling the [[Get]] internal method of\n  //    options with argument property.\n  var value = options[property]; // 2. If value is not undefined, then\n\n  if (value !== undefined) {\n    // a. Let value be ToNumber(value).\n    value = Number(value); // b. If value is NaN or less than minimum or greater than maximum, throw a\n    //    RangeError exception.\n\n    if (isNaN(value) || value < minimum || value > maximum) throw new RangeError('Value is not a number or outside accepted range'); // c. Return floor(value).\n\n    return Math.floor(value);\n  } // 3. Else return fallback.\n\n\n  return fallback;\n} // 8 The Intl Object\n\n\nvar Intl = {}; // 8.2 Function Properties of the Intl Object\n// 8.2.1\n// @spec[tc39/ecma402/master/spec/intl.html]\n// @clause[sec-intl.getcanonicallocales]\n\nfunction getCanonicalLocales(locales) {\n  // 1. Let ll be ? CanonicalizeLocaleList(locales).\n  var ll = CanonicalizeLocaleList(locales); // 2. Return CreateArrayFromList(ll).\n\n  {\n    var result = [];\n    var len = ll.length;\n    var k = 0;\n\n    while (k < len) {\n      result[k] = ll[k];\n      k++;\n    }\n\n    return result;\n  }\n}\n\nObject.defineProperty(Intl, 'getCanonicalLocales', {\n  enumerable: false,\n  configurable: true,\n  writable: true,\n  value: getCanonicalLocales\n}); // Currency minor units output from get-4217 grunt task, formatted\n\nvar currencyMinorUnits = {\n  BHD: 3,\n  BYR: 0,\n  XOF: 0,\n  BIF: 0,\n  XAF: 0,\n  CLF: 4,\n  CLP: 0,\n  KMF: 0,\n  DJF: 0,\n  XPF: 0,\n  GNF: 0,\n  ISK: 0,\n  IQD: 3,\n  JPY: 0,\n  JOD: 3,\n  KRW: 0,\n  KWD: 3,\n  LYD: 3,\n  OMR: 3,\n  PYG: 0,\n  RWF: 0,\n  TND: 3,\n  UGX: 0,\n  UYI: 0,\n  VUV: 0,\n  VND: 0\n}; // Define the NumberFormat constructor internally so it cannot be tainted\n\nfunction NumberFormatConstructor() {\n  var locales = arguments[0];\n  var options = arguments[1];\n\n  if (!this || this === Intl) {\n    return new Intl.NumberFormat(locales, options);\n  }\n\n  return InitializeNumberFormat(toObject(this), locales, options);\n}\n\ndefineProperty(Intl, 'NumberFormat', {\n  configurable: true,\n  writable: true,\n  value: NumberFormatConstructor\n}); // Must explicitly set prototypes as unwritable\n\ndefineProperty(Intl.NumberFormat, 'prototype', {\n  writable: false\n});\n/**\n * The abstract operation InitializeNumberFormat accepts the arguments\n * numberFormat (which must be an object), locales, and options. It initializes\n * numberFormat as a NumberFormat object.\n */\n\nfunction\n/*11.1.1.1 */\nInitializeNumberFormat(numberFormat, locales, options) {\n  // This will be a internal properties object if we're not already initialized\n  var internal = getInternalProperties(numberFormat); // Create an object whose props can be used to restore the values of RegExp props\n\n  var regexpRestore = createRegExpRestore(); // 1. If numberFormat has an [[initializedIntlObject]] internal property with\n  // value true, throw a TypeError exception.\n\n  if (internal['[[initializedIntlObject]]'] === true) throw new TypeError('`this` object has already been initialized as an Intl object'); // Need this to access the `internal` object\n\n  defineProperty(numberFormat, '__getInternalProperties', {\n    value: function value() {\n      // NOTE: Non-standard, for internal use only\n      if (arguments[0] === secret) return internal;\n    }\n  }); // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.\n\n  internal['[[initializedIntlObject]]'] = true; // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n  //    abstract operation (defined in 9.2.1) with argument locales.\n\n  var requestedLocales = CanonicalizeLocaleList(locales); // 4. If options is undefined, then\n\n  if (options === undefined) // a. Let options be the result of creating a new object as if by the\n    // expression new Object() where Object is the standard built-in constructor\n    // with that name.\n    options = {}; // 5. Else\n  else // a. Let options be ToObject(options).\n    options = toObject(options); // 6. Let opt be a new Record.\n\n  var opt = new Record(),\n      // 7. Let matcher be the result of calling the GetOption abstract operation\n  //    (defined in 9.2.9) with the arguments options, \"localeMatcher\", \"string\",\n  //    a List containing the two String values \"lookup\" and \"best fit\", and\n  //    \"best fit\".\n  matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit'); // 8. Set opt.[[localeMatcher]] to matcher.\n\n  opt['[[localeMatcher]]'] = matcher; // 9. Let NumberFormat be the standard built-in object that is the initial value\n  //    of Intl.NumberFormat.\n  // 10. Let localeData be the value of the [[localeData]] internal property of\n  //     NumberFormat.\n\n  var localeData = internals.NumberFormat['[[localeData]]']; // 11. Let r be the result of calling the ResolveLocale abstract operation\n  //     (defined in 9.2.5) with the [[availableLocales]] internal property of\n  //     NumberFormat, requestedLocales, opt, the [[relevantExtensionKeys]]\n  //     internal property of NumberFormat, and localeData.\n\n  var r = ResolveLocale(internals.NumberFormat['[[availableLocales]]'], requestedLocales, opt, internals.NumberFormat['[[relevantExtensionKeys]]'], localeData); // 12. Set the [[locale]] internal property of numberFormat to the value of\n  //     r.[[locale]].\n\n  internal['[[locale]]'] = r['[[locale]]']; // 13. Set the [[numberingSystem]] internal property of numberFormat to the value\n  //     of r.[[nu]].\n\n  internal['[[numberingSystem]]'] = r['[[nu]]']; // The specification doesn't tell us to do this, but it's helpful later on\n\n  internal['[[dataLocale]]'] = r['[[dataLocale]]']; // 14. Let dataLocale be the value of r.[[dataLocale]].\n\n  var dataLocale = r['[[dataLocale]]']; // 15. Let s be the result of calling the GetOption abstract operation with the\n  //     arguments options, \"style\", \"string\", a List containing the three String\n  //     values \"decimal\", \"percent\", and \"currency\", and \"decimal\".\n\n  var s = GetOption(options, 'style', 'string', new List('decimal', 'percent', 'currency'), 'decimal'); // 16. Set the [[style]] internal property of numberFormat to s.\n\n  internal['[[style]]'] = s; // 17. Let c be the result of calling the GetOption abstract operation with the\n  //     arguments options, \"currency\", \"string\", undefined, and undefined.\n\n  var c = GetOption(options, 'currency', 'string'); // 18. If c is not undefined and the result of calling the\n  //     IsWellFormedCurrencyCode abstract operation (defined in 6.3.1) with\n  //     argument c is false, then throw a RangeError exception.\n\n  if (c !== undefined && !IsWellFormedCurrencyCode(c)) throw new RangeError(\"'\" + c + \"' is not a valid currency code\"); // 19. If s is \"currency\" and c is undefined, throw a TypeError exception.\n\n  if (s === 'currency' && c === undefined) throw new TypeError('Currency code is required when style is currency');\n  var cDigits = void 0; // 20. If s is \"currency\", then\n\n  if (s === 'currency') {\n    // a. Let c be the result of converting c to upper case as specified in 6.1.\n    c = c.toUpperCase(); // b. Set the [[currency]] internal property of numberFormat to c.\n\n    internal['[[currency]]'] = c; // c. Let cDigits be the result of calling the CurrencyDigits abstract\n    //    operation (defined below) with argument c.\n\n    cDigits = CurrencyDigits(c);\n  } // 21. Let cd be the result of calling the GetOption abstract operation with the\n  //     arguments options, \"currencyDisplay\", \"string\", a List containing the\n  //     three String values \"code\", \"symbol\", and \"name\", and \"symbol\".\n\n\n  var cd = GetOption(options, 'currencyDisplay', 'string', new List('code', 'symbol', 'name'), 'symbol'); // 22. If s is \"currency\", then set the [[currencyDisplay]] internal property of\n  //     numberFormat to cd.\n\n  if (s === 'currency') internal['[[currencyDisplay]]'] = cd; // 23. Let mnid be the result of calling the GetNumberOption abstract operation\n  //     (defined in 9.2.10) with arguments options, \"minimumIntegerDigits\", 1, 21,\n  //     and 1.\n\n  var mnid = GetNumberOption(options, 'minimumIntegerDigits', 1, 21, 1); // 24. Set the [[minimumIntegerDigits]] internal property of numberFormat to mnid.\n\n  internal['[[minimumIntegerDigits]]'] = mnid; // 25. If s is \"currency\", then let mnfdDefault be cDigits; else let mnfdDefault\n  //     be 0.\n\n  var mnfdDefault = s === 'currency' ? cDigits : 0; // 26. Let mnfd be the result of calling the GetNumberOption abstract operation\n  //     with arguments options, \"minimumFractionDigits\", 0, 20, and mnfdDefault.\n\n  var mnfd = GetNumberOption(options, 'minimumFractionDigits', 0, 20, mnfdDefault); // 27. Set the [[minimumFractionDigits]] internal property of numberFormat to mnfd.\n\n  internal['[[minimumFractionDigits]]'] = mnfd; // 28. If s is \"currency\", then let mxfdDefault be max(mnfd, cDigits); else if s\n  //     is \"percent\", then let mxfdDefault be max(mnfd, 0); else let mxfdDefault\n  //     be max(mnfd, 3).\n\n  var mxfdDefault = s === 'currency' ? Math.max(mnfd, cDigits) : s === 'percent' ? Math.max(mnfd, 0) : Math.max(mnfd, 3); // 29. Let mxfd be the result of calling the GetNumberOption abstract operation\n  //     with arguments options, \"maximumFractionDigits\", mnfd, 20, and mxfdDefault.\n\n  var mxfd = GetNumberOption(options, 'maximumFractionDigits', mnfd, 20, mxfdDefault); // 30. Set the [[maximumFractionDigits]] internal property of numberFormat to mxfd.\n\n  internal['[[maximumFractionDigits]]'] = mxfd; // 31. Let mnsd be the result of calling the [[Get]] internal method of options\n  //     with argument \"minimumSignificantDigits\".\n\n  var mnsd = options.minimumSignificantDigits; // 32. Let mxsd be the result of calling the [[Get]] internal method of options\n  //     with argument \"maximumSignificantDigits\".\n\n  var mxsd = options.maximumSignificantDigits; // 33. If mnsd is not undefined or mxsd is not undefined, then:\n\n  if (mnsd !== undefined || mxsd !== undefined) {\n    // a. Let mnsd be the result of calling the GetNumberOption abstract\n    //    operation with arguments options, \"minimumSignificantDigits\", 1, 21,\n    //    and 1.\n    mnsd = GetNumberOption(options, 'minimumSignificantDigits', 1, 21, 1); // b. Let mxsd be the result of calling the GetNumberOption abstract\n    //     operation with arguments options, \"maximumSignificantDigits\", mnsd,\n    //     21, and 21.\n\n    mxsd = GetNumberOption(options, 'maximumSignificantDigits', mnsd, 21, 21); // c. Set the [[minimumSignificantDigits]] internal property of numberFormat\n    //    to mnsd, and the [[maximumSignificantDigits]] internal property of\n    //    numberFormat to mxsd.\n\n    internal['[[minimumSignificantDigits]]'] = mnsd;\n    internal['[[maximumSignificantDigits]]'] = mxsd;\n  } // 34. Let g be the result of calling the GetOption abstract operation with the\n  //     arguments options, \"useGrouping\", \"boolean\", undefined, and true.\n\n\n  var g = GetOption(options, 'useGrouping', 'boolean', undefined, true); // 35. Set the [[useGrouping]] internal property of numberFormat to g.\n\n  internal['[[useGrouping]]'] = g; // 36. Let dataLocaleData be the result of calling the [[Get]] internal method of\n  //     localeData with argument dataLocale.\n\n  var dataLocaleData = localeData[dataLocale]; // 37. Let patterns be the result of calling the [[Get]] internal method of\n  //     dataLocaleData with argument \"patterns\".\n\n  var patterns = dataLocaleData.patterns; // 38. Assert: patterns is an object (see 11.2.3)\n  // 39. Let stylePatterns be the result of calling the [[Get]] internal method of\n  //     patterns with argument s.\n\n  var stylePatterns = patterns[s]; // 40. Set the [[positivePattern]] internal property of numberFormat to the\n  //     result of calling the [[Get]] internal method of stylePatterns with the\n  //     argument \"positivePattern\".\n\n  internal['[[positivePattern]]'] = stylePatterns.positivePattern; // 41. Set the [[negativePattern]] internal property of numberFormat to the\n  //     result of calling the [[Get]] internal method of stylePatterns with the\n  //     argument \"negativePattern\".\n\n  internal['[[negativePattern]]'] = stylePatterns.negativePattern; // 42. Set the [[boundFormat]] internal property of numberFormat to undefined.\n\n  internal['[[boundFormat]]'] = undefined; // 43. Set the [[initializedNumberFormat]] internal property of numberFormat to\n  //     true.\n\n  internal['[[initializedNumberFormat]]'] = true; // In ES3, we need to pre-bind the format() function\n\n  if (es3) numberFormat.format = GetFormatNumber.call(numberFormat); // Restore the RegExp properties\n\n  regexpRestore(); // Return the newly initialised object\n\n  return numberFormat;\n}\n\nfunction CurrencyDigits(currency) {\n  // When the CurrencyDigits abstract operation is called with an argument currency\n  // (which must be an upper case String value), the following steps are taken:\n  // 1. If the ISO 4217 currency and funds code list contains currency as an\n  // alphabetic code, then return the minor unit value corresponding to the\n  // currency from the list; else return 2.\n  return currencyMinorUnits[currency] !== undefined ? currencyMinorUnits[currency] : 2;\n}\n/* 11.2.3 */\n\n\ninternals.NumberFormat = {\n  '[[availableLocales]]': [],\n  '[[relevantExtensionKeys]]': ['nu'],\n  '[[localeData]]': {}\n};\n/**\n * When the supportedLocalesOf method of Intl.NumberFormat is called, the\n * following steps are taken:\n */\n\n/* 11.2.2 */\n\ndefineProperty(Intl.NumberFormat, 'supportedLocalesOf', {\n  configurable: true,\n  writable: true,\n  value: fnBind.call(function (locales) {\n    // Bound functions only have the `this` value altered if being used as a constructor,\n    // this lets us imitate a native function that has no constructor\n    if (!hop.call(this, '[[availableLocales]]')) throw new TypeError('supportedLocalesOf() is not a constructor'); // Create an object whose props can be used to restore the values of RegExp props\n\n    var regexpRestore = createRegExpRestore(),\n        // 1. If options is not provided, then let options be undefined.\n    options = arguments[1],\n        // 2. Let availableLocales be the value of the [[availableLocales]] internal\n    //    property of the standard built-in object that is the initial value of\n    //    Intl.NumberFormat.\n    availableLocales = this['[[availableLocales]]'],\n        // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n    //    abstract operation (defined in 9.2.1) with argument locales.\n    requestedLocales = CanonicalizeLocaleList(locales); // Restore the RegExp properties\n\n    regexpRestore(); // 4. Return the result of calling the SupportedLocales abstract operation\n    //    (defined in 9.2.8) with arguments availableLocales, requestedLocales,\n    //    and options.\n\n    return SupportedLocales(availableLocales, requestedLocales, options);\n  }, internals.NumberFormat)\n});\n/**\n * This named accessor property returns a function that formats a number\n * according to the effective locale and the formatting options of this\n * NumberFormat object.\n */\n\n/* 11.3.2 */\n\ndefineProperty(Intl.NumberFormat.prototype, 'format', {\n  configurable: true,\n  get: GetFormatNumber\n});\n\nfunction GetFormatNumber() {\n  var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this); // Satisfy test 11.3_b\n\n  if (!internal || !internal['[[initializedNumberFormat]]']) throw new TypeError('`this` value for format() is not an initialized Intl.NumberFormat object.'); // The value of the [[Get]] attribute is a function that takes the following\n  // steps:\n  // 1. If the [[boundFormat]] internal property of this NumberFormat object\n  //    is undefined, then:\n\n  if (internal['[[boundFormat]]'] === undefined) {\n    // a. Let F be a Function object, with internal properties set as\n    //    specified for built-in functions in ES5, 15, or successor, and the\n    //    length property set to 1, that takes the argument value and\n    //    performs the following steps:\n    var F = function F(value) {\n      // i. If value is not provided, then let value be undefined.\n      // ii. Let x be ToNumber(value).\n      // iii. Return the result of calling the FormatNumber abstract\n      //      operation (defined below) with arguments this and x.\n      return FormatNumber(this,\n      /* x = */\n      Number(value));\n    }; // b. Let bind be the standard built-in function object defined in ES5,\n    //    15.3.4.5.\n    // c. Let bf be the result of calling the [[Call]] internal method of\n    //    bind with F as the this value and an argument list containing\n    //    the single item this.\n\n\n    var bf = fnBind.call(F, this); // d. Set the [[boundFormat]] internal property of this NumberFormat\n    //    object to bf.\n\n    internal['[[boundFormat]]'] = bf;\n  } // Return the value of the [[boundFormat]] internal property of this\n  // NumberFormat object.\n\n\n  return internal['[[boundFormat]]'];\n}\n\nfunction formatToParts() {\n  var value = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n  var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n  if (!internal || !internal['[[initializedNumberFormat]]']) throw new TypeError('`this` value for formatToParts() is not an initialized Intl.NumberFormat object.');\n  var x = Number(value);\n  return FormatNumberToParts(this, x);\n}\n\nObject.defineProperty(Intl.NumberFormat.prototype, 'formatToParts', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: formatToParts\n});\n/*\n * @spec[stasm/ecma402/number-format-to-parts/spec/numberformat.html]\n * @clause[sec-formatnumbertoparts]\n */\n\nfunction FormatNumberToParts(numberFormat, x) {\n  // 1. Let parts be ? PartitionNumberPattern(numberFormat, x).\n  var parts = PartitionNumberPattern(numberFormat, x); // 2. Let result be ArrayCreate(0).\n\n  var result = []; // 3. Let n be 0.\n\n  var n = 0; // 4. For each part in parts, do:\n\n  for (var i = 0; parts.length > i; i++) {\n    var part = parts[i]; // a. Let O be ObjectCreate(%ObjectPrototype%).\n\n    var O = {}; // a. Perform ? CreateDataPropertyOrThrow(O, \"type\", part.[[type]]).\n\n    O.type = part['[[type]]']; // a. Perform ? CreateDataPropertyOrThrow(O, \"value\", part.[[value]]).\n\n    O.value = part['[[value]]']; // a. Perform ? CreateDataPropertyOrThrow(result, ? ToString(n), O).\n\n    result[n] = O; // a. Increment n by 1.\n\n    n += 1;\n  } // 5. Return result.\n\n\n  return result;\n}\n/*\n * @spec[stasm/ecma402/number-format-to-parts/spec/numberformat.html]\n * @clause[sec-partitionnumberpattern]\n */\n\n\nfunction PartitionNumberPattern(numberFormat, x) {\n  var internal = getInternalProperties(numberFormat),\n      locale = internal['[[dataLocale]]'],\n      nums = internal['[[numberingSystem]]'],\n      data = internals.NumberFormat['[[localeData]]'][locale],\n      ild = data.symbols[nums] || data.symbols.latn,\n      pattern = void 0; // 1. If x is not NaN and x < 0, then:\n\n  if (!isNaN(x) && x < 0) {\n    // a. Let x be -x.\n    x = -x; // a. Let pattern be the value of numberFormat.[[negativePattern]].\n\n    pattern = internal['[[negativePattern]]'];\n  } // 2. Else,\n  else {\n      // a. Let pattern be the value of numberFormat.[[positivePattern]].\n      pattern = internal['[[positivePattern]]'];\n    } // 3. Let result be a new empty List.\n\n\n  var result = new List(); // 4. Let beginIndex be Call(%StringProto_indexOf%, pattern, \"{\", 0).\n\n  var beginIndex = pattern.indexOf('{', 0); // 5. Let endIndex be 0.\n\n  var endIndex = 0; // 6. Let nextIndex be 0.\n\n  var nextIndex = 0; // 7. Let length be the number of code units in pattern.\n\n  var length = pattern.length; // 8. Repeat while beginIndex is an integer index into pattern:\n\n  while (beginIndex > -1 && beginIndex < length) {\n    // a. Set endIndex to Call(%StringProto_indexOf%, pattern, \"}\", beginIndex)\n    endIndex = pattern.indexOf('}', beginIndex); // a. If endIndex = -1, throw new Error exception.\n\n    if (endIndex === -1) throw new Error(); // a. If beginIndex is greater than nextIndex, then:\n\n    if (beginIndex > nextIndex) {\n      // i. Let literal be a substring of pattern from position nextIndex, inclusive, to position beginIndex, exclusive.\n      var literal = pattern.substring(nextIndex, beginIndex); // ii. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n\n      arrPush.call(result, {\n        '[[type]]': 'literal',\n        '[[value]]': literal\n      });\n    } // a. Let p be the substring of pattern from position beginIndex, exclusive, to position endIndex, exclusive.\n\n\n    var p = pattern.substring(beginIndex + 1, endIndex); // a. If p is equal \"number\", then:\n\n    if (p === \"number\") {\n      // i. If x is NaN,\n      if (isNaN(x)) {\n        // 1. Let n be an ILD String value indicating the NaN value.\n        var n = ild.nan; // 2. Add new part record { [[type]]: \"nan\", [[value]]: n } as a new element of the list result.\n\n        arrPush.call(result, {\n          '[[type]]': 'nan',\n          '[[value]]': n\n        });\n      } // ii. Else if isFinite(x) is false,\n      else if (!isFinite(x)) {\n          // 1. Let n be an ILD String value indicating infinity.\n          var _n = ild.infinity; // 2. Add new part record { [[type]]: \"infinity\", [[value]]: n } as a new element of the list result.\n\n          arrPush.call(result, {\n            '[[type]]': 'infinity',\n            '[[value]]': _n\n          });\n        } // iii. Else,\n        else {\n            // 1. If the value of numberFormat.[[style]] is \"percent\" and isFinite(x), let x be 100 × x.\n            if (internal['[[style]]'] === 'percent' && isFinite(x)) x *= 100;\n\n            var _n2 = void 0; // 2. If the numberFormat.[[minimumSignificantDigits]] and numberFormat.[[maximumSignificantDigits]] are present, then\n\n\n            if (hop.call(internal, '[[minimumSignificantDigits]]') && hop.call(internal, '[[maximumSignificantDigits]]')) {\n              // a. Let n be ToRawPrecision(x, numberFormat.[[minimumSignificantDigits]], numberFormat.[[maximumSignificantDigits]]).\n              _n2 = ToRawPrecision(x, internal['[[minimumSignificantDigits]]'], internal['[[maximumSignificantDigits]]']);\n            } // 3. Else,\n            else {\n                // a. Let n be ToRawFixed(x, numberFormat.[[minimumIntegerDigits]], numberFormat.[[minimumFractionDigits]], numberFormat.[[maximumFractionDigits]]).\n                _n2 = ToRawFixed(x, internal['[[minimumIntegerDigits]]'], internal['[[minimumFractionDigits]]'], internal['[[maximumFractionDigits]]']);\n              } // 4. If the value of the numberFormat.[[numberingSystem]] matches one of the values in the \"Numbering System\" column of Table 2 below, then\n\n\n            if (numSys[nums]) {\n              (function () {\n                // a. Let digits be an array whose 10 String valued elements are the UTF-16 string representations of the 10 digits specified in the \"Digits\" column of the matching row in Table 2.\n                var digits = numSys[nums]; // a. Replace each digit in n with the value of digits[digit].\n\n                _n2 = String(_n2).replace(/\\d/g, function (digit) {\n                  return digits[digit];\n                });\n              })();\n            } // 5. Else use an implementation dependent algorithm to map n to the appropriate representation of n in the given numbering system.\n            else _n2 = String(_n2); // ###TODO###\n\n\n            var integer = void 0;\n            var fraction = void 0; // 6. Let decimalSepIndex be Call(%StringProto_indexOf%, n, \".\", 0).\n\n            var decimalSepIndex = _n2.indexOf('.', 0); // 7. If decimalSepIndex > 0, then:\n\n\n            if (decimalSepIndex > 0) {\n              // a. Let integer be the substring of n from position 0, inclusive, to position decimalSepIndex, exclusive.\n              integer = _n2.substring(0, decimalSepIndex); // a. Let fraction be the substring of n from position decimalSepIndex, exclusive, to the end of n.\n\n              fraction = _n2.substring(decimalSepIndex + 1, decimalSepIndex.length);\n            } // 8. Else:\n            else {\n                // a. Let integer be n.\n                integer = _n2; // a. Let fraction be undefined.\n\n                fraction = undefined;\n              } // 9. If the value of the numberFormat.[[useGrouping]] is true,\n\n\n            if (internal['[[useGrouping]]'] === true) {\n              // a. Let groupSepSymbol be the ILND String representing the grouping separator.\n              var groupSepSymbol = ild.group; // a. Let groups be a List whose elements are, in left to right order, the substrings defined by ILND set of locations within the integer.\n\n              var groups = []; // ----> implementation:\n              // Primary group represents the group closest to the decimal\n\n              var pgSize = data.patterns.primaryGroupSize || 3; // Secondary group is every other group\n\n              var sgSize = data.patterns.secondaryGroupSize || pgSize; // Group only if necessary\n\n              if (integer.length > pgSize) {\n                // Index of the primary grouping separator\n                var end = integer.length - pgSize; // Starting index for our loop\n\n                var idx = end % sgSize;\n                var start = integer.slice(0, idx);\n                if (start.length) arrPush.call(groups, start); // Loop to separate into secondary grouping digits\n\n                while (idx < end) {\n                  arrPush.call(groups, integer.slice(idx, idx + sgSize));\n                  idx += sgSize;\n                } // Add the primary grouping digits\n\n\n                arrPush.call(groups, integer.slice(end));\n              } else {\n                arrPush.call(groups, integer);\n              } // a. Assert: The number of elements in groups List is greater than 0.\n\n\n              if (groups.length === 0) throw new Error(); // a. Repeat, while groups List is not empty:\n\n              while (groups.length) {\n                // i. Remove the first element from groups and let integerGroup be the value of that element.\n                var integerGroup = arrShift.call(groups); // ii. Add new part record { [[type]]: \"integer\", [[value]]: integerGroup } as a new element of the list result.\n\n                arrPush.call(result, {\n                  '[[type]]': 'integer',\n                  '[[value]]': integerGroup\n                }); // iii. If groups List is not empty, then:\n\n                if (groups.length) {\n                  // 1. Add new part record { [[type]]: \"group\", [[value]]: groupSepSymbol } as a new element of the list result.\n                  arrPush.call(result, {\n                    '[[type]]': 'group',\n                    '[[value]]': groupSepSymbol\n                  });\n                }\n              }\n            } // 10. Else,\n            else {\n                // a. Add new part record { [[type]]: \"integer\", [[value]]: integer } as a new element of the list result.\n                arrPush.call(result, {\n                  '[[type]]': 'integer',\n                  '[[value]]': integer\n                });\n              } // 11. If fraction is not undefined, then:\n\n\n            if (fraction !== undefined) {\n              // a. Let decimalSepSymbol be the ILND String representing the decimal separator.\n              var decimalSepSymbol = ild.decimal; // a. Add new part record { [[type]]: \"decimal\", [[value]]: decimalSepSymbol } as a new element of the list result.\n\n              arrPush.call(result, {\n                '[[type]]': 'decimal',\n                '[[value]]': decimalSepSymbol\n              }); // a. Add new part record { [[type]]: \"fraction\", [[value]]: fraction } as a new element of the list result.\n\n              arrPush.call(result, {\n                '[[type]]': 'fraction',\n                '[[value]]': fraction\n              });\n            }\n          }\n    } // a. Else if p is equal \"plusSign\", then:\n    else if (p === \"plusSign\") {\n        // i. Let plusSignSymbol be the ILND String representing the plus sign.\n        var plusSignSymbol = ild.plusSign; // ii. Add new part record { [[type]]: \"plusSign\", [[value]]: plusSignSymbol } as a new element of the list result.\n\n        arrPush.call(result, {\n          '[[type]]': 'plusSign',\n          '[[value]]': plusSignSymbol\n        });\n      } // a. Else if p is equal \"minusSign\", then:\n      else if (p === \"minusSign\") {\n          // i. Let minusSignSymbol be the ILND String representing the minus sign.\n          var minusSignSymbol = ild.minusSign; // ii. Add new part record { [[type]]: \"minusSign\", [[value]]: minusSignSymbol } as a new element of the list result.\n\n          arrPush.call(result, {\n            '[[type]]': 'minusSign',\n            '[[value]]': minusSignSymbol\n          });\n        } // a. Else if p is equal \"percentSign\" and numberFormat.[[style]] is \"percent\", then:\n        else if (p === \"percentSign\" && internal['[[style]]'] === \"percent\") {\n            // i. Let percentSignSymbol be the ILND String representing the percent sign.\n            var percentSignSymbol = ild.percentSign; // ii. Add new part record { [[type]]: \"percentSign\", [[value]]: percentSignSymbol } as a new element of the list result.\n\n            arrPush.call(result, {\n              '[[type]]': 'literal',\n              '[[value]]': percentSignSymbol\n            });\n          } // a. Else if p is equal \"currency\" and numberFormat.[[style]] is \"currency\", then:\n          else if (p === \"currency\" && internal['[[style]]'] === \"currency\") {\n              // i. Let currency be the value of numberFormat.[[currency]].\n              var currency = internal['[[currency]]'];\n              var cd = void 0; // ii. If numberFormat.[[currencyDisplay]] is \"code\", then\n\n              if (internal['[[currencyDisplay]]'] === \"code\") {\n                // 1. Let cd be currency.\n                cd = currency;\n              } // iii. Else if numberFormat.[[currencyDisplay]] is \"symbol\", then\n              else if (internal['[[currencyDisplay]]'] === \"symbol\") {\n                  // 1. Let cd be an ILD string representing currency in short form. If the implementation does not have such a representation of currency, use currency itself.\n                  cd = data.currencies[currency] || currency;\n                } // iv. Else if numberFormat.[[currencyDisplay]] is \"name\", then\n                else if (internal['[[currencyDisplay]]'] === \"name\") {\n                    // 1. Let cd be an ILD string representing currency in long form. If the implementation does not have such a representation of currency, then use currency itself.\n                    cd = currency;\n                  } // v. Add new part record { [[type]]: \"currency\", [[value]]: cd } as a new element of the list result.\n\n\n              arrPush.call(result, {\n                '[[type]]': 'currency',\n                '[[value]]': cd\n              });\n            } // a. Else,\n            else {\n                // i. Let literal be the substring of pattern from position beginIndex, inclusive, to position endIndex, inclusive.\n                var _literal = pattern.substring(beginIndex, endIndex); // ii. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n\n\n                arrPush.call(result, {\n                  '[[type]]': 'literal',\n                  '[[value]]': _literal\n                });\n              } // a. Set nextIndex to endIndex + 1.\n\n\n    nextIndex = endIndex + 1; // a. Set beginIndex to Call(%StringProto_indexOf%, pattern, \"{\", nextIndex)\n\n    beginIndex = pattern.indexOf('{', nextIndex);\n  } // 9. If nextIndex is less than length, then:\n\n\n  if (nextIndex < length) {\n    // a. Let literal be the substring of pattern from position nextIndex, inclusive, to position length, exclusive.\n    var _literal2 = pattern.substring(nextIndex, length); // a. Add new part record { [[type]]: \"literal\", [[value]]: literal } as a new element of the list result.\n\n\n    arrPush.call(result, {\n      '[[type]]': 'literal',\n      '[[value]]': _literal2\n    });\n  } // 10. Return result.\n\n\n  return result;\n}\n/*\n * @spec[stasm/ecma402/number-format-to-parts/spec/numberformat.html]\n * @clause[sec-formatnumber]\n */\n\n\nfunction FormatNumber(numberFormat, x) {\n  // 1. Let parts be ? PartitionNumberPattern(numberFormat, x).\n  var parts = PartitionNumberPattern(numberFormat, x); // 2. Let result be an empty String.\n\n  var result = ''; // 3. For each part in parts, do:\n\n  for (var i = 0; parts.length > i; i++) {\n    var part = parts[i]; // a. Set result to a String value produced by concatenating result and part.[[value]].\n\n    result += part['[[value]]'];\n  } // 4. Return result.\n\n\n  return result;\n}\n/**\n * When the ToRawPrecision abstract operation is called with arguments x (which\n * must be a finite non-negative number), minPrecision, and maxPrecision (both\n * must be integers between 1 and 21) the following steps are taken:\n */\n\n\nfunction ToRawPrecision(x, minPrecision, maxPrecision) {\n  // 1. Let p be maxPrecision.\n  var p = maxPrecision;\n  var m = void 0,\n      e = void 0; // 2. If x = 0, then\n\n  if (x === 0) {\n    // a. Let m be the String consisting of p occurrences of the character \"0\".\n    m = arrJoin.call(Array(p + 1), '0'); // b. Let e be 0.\n\n    e = 0;\n  } // 3. Else\n  else {\n      // a. Let e and n be integers such that 10ᵖ⁻¹ ≤ n < 10ᵖ and for which the\n      //    exact mathematical value of n × 10ᵉ⁻ᵖ⁺¹ – x is as close to zero as\n      //    possible. If there are two such sets of e and n, pick the e and n for\n      //    which n × 10ᵉ⁻ᵖ⁺¹ is larger.\n      e = log10Floor(Math.abs(x)); // Easier to get to m from here\n\n      var f = Math.round(Math.exp(Math.abs(e - p + 1) * Math.LN10)); // b. Let m be the String consisting of the digits of the decimal\n      //    representation of n (in order, with no leading zeroes)\n\n      m = String(Math.round(e - p + 1 < 0 ? x * f : x / f));\n    } // 4. If e ≥ p, then\n\n\n  if (e >= p) // a. Return the concatenation of m and e-p+1 occurrences of the character \"0\".\n    return m + arrJoin.call(Array(e - p + 1 + 1), '0'); // 5. If e = p-1, then\n  else if (e === p - 1) // a. Return m.\n      return m; // 6. If e ≥ 0, then\n    else if (e >= 0) // a. Let m be the concatenation of the first e+1 characters of m, the character\n        //    \".\", and the remaining p–(e+1) characters of m.\n        m = m.slice(0, e + 1) + '.' + m.slice(e + 1); // 7. If e < 0, then\n      else if (e < 0) // a. Let m be the concatenation of the String \"0.\", –(e+1) occurrences of the\n          //    character \"0\", and the string m.\n          m = '0.' + arrJoin.call(Array(-(e + 1) + 1), '0') + m; // 8. If m contains the character \".\", and maxPrecision > minPrecision, then\n\n  if (m.indexOf(\".\") >= 0 && maxPrecision > minPrecision) {\n    // a. Let cut be maxPrecision – minPrecision.\n    var cut = maxPrecision - minPrecision; // b. Repeat while cut > 0 and the last character of m is \"0\":\n\n    while (cut > 0 && m.charAt(m.length - 1) === '0') {\n      //  i. Remove the last character from m.\n      m = m.slice(0, -1); //  ii. Decrease cut by 1.\n\n      cut--;\n    } // c. If the last character of m is \".\", then\n\n\n    if (m.charAt(m.length - 1) === '.') //    i. Remove the last character from m.\n      m = m.slice(0, -1);\n  } // 9. Return m.\n\n\n  return m;\n}\n/**\n * @spec[tc39/ecma402/master/spec/numberformat.html]\n * @clause[sec-torawfixed]\n * When the ToRawFixed abstract operation is called with arguments x (which must\n * be a finite non-negative number), minInteger (which must be an integer between\n * 1 and 21), minFraction, and maxFraction (which must be integers between 0 and\n * 20) the following steps are taken:\n */\n\n\nfunction ToRawFixed(x, minInteger, minFraction, maxFraction) {\n  // 1. Let f be maxFraction.\n  var f = maxFraction; // 2. Let n be an integer for which the exact mathematical value of n ÷ 10f – x is as close to zero as possible. If there are two such n, pick the larger n.\n\n  var n = Math.pow(10, f) * x; // diverging...\n  // 3. If n = 0, let m be the String \"0\". Otherwise, let m be the String consisting of the digits of the decimal representation of n (in order, with no leading zeroes).\n\n  var m = n === 0 ? \"0\" : n.toFixed(0); // divering...\n\n  {\n    // this diversion is needed to take into consideration big numbers, e.g.:\n    // 1.2344501e+37 -> 12344501000000000000000000000000000000\n    var idx = void 0;\n    var exp = (idx = m.indexOf('e')) > -1 ? m.slice(idx + 1) : 0;\n\n    if (exp) {\n      m = m.slice(0, idx).replace('.', '');\n      m += arrJoin.call(Array(exp - (m.length - 1) + 1), '0');\n    }\n  }\n  var int = void 0; // 4. If f ≠ 0, then\n\n  if (f !== 0) {\n    // a. Let k be the number of characters in m.\n    var k = m.length; // a. If k ≤ f, then\n\n    if (k <= f) {\n      // i. Let z be the String consisting of f+1–k occurrences of the character \"0\".\n      var z = arrJoin.call(Array(f + 1 - k + 1), '0'); // ii. Let m be the concatenation of Strings z and m.\n\n      m = z + m; // iii. Let k be f+1.\n\n      k = f + 1;\n    } // a. Let a be the first k–f characters of m, and let b be the remaining f characters of m.\n\n\n    var a = m.substring(0, k - f),\n        b = m.substring(k - f, m.length); // a. Let m be the concatenation of the three Strings a, \".\", and b.\n\n    m = a + \".\" + b; // a. Let int be the number of characters in a.\n\n    int = a.length;\n  } // 5. Else, let int be the number of characters in m.\n  else int = m.length; // 6. Let cut be maxFraction – minFraction.\n\n\n  var cut = maxFraction - minFraction; // 7. Repeat while cut > 0 and the last character of m is \"0\":\n\n  while (cut > 0 && m.slice(-1) === \"0\") {\n    // a. Remove the last character from m.\n    m = m.slice(0, -1); // a. Decrease cut by 1.\n\n    cut--;\n  } // 8. If the last character of m is \".\", then\n\n\n  if (m.slice(-1) === \".\") {\n    // a. Remove the last character from m.\n    m = m.slice(0, -1);\n  } // 9. If int < minInteger, then\n\n\n  if (int < minInteger) {\n    // a. Let z be the String consisting of minInteger–int occurrences of the character \"0\".\n    var _z = arrJoin.call(Array(minInteger - int + 1), '0'); // a. Let m be the concatenation of Strings z and m.\n\n\n    m = _z + m;\n  } // 10. Return m.\n\n\n  return m;\n} // Sect 11.3.2 Table 2, Numbering systems\n// ======================================\n\n\nvar numSys = {\n  arab: [\"٠\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"],\n  arabext: [\"۰\", \"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\"],\n  bali: [\"᭐\", \"᭑\", \"᭒\", \"᭓\", \"᭔\", \"᭕\", \"᭖\", \"᭗\", \"᭘\", \"᭙\"],\n  beng: [\"০\", \"১\", \"২\", \"৩\", \"৪\", \"৫\", \"৬\", \"৭\", \"৮\", \"৯\"],\n  deva: [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"],\n  fullwide: [\"０\", \"１\", \"２\", \"３\", \"４\", \"５\", \"６\", \"７\", \"８\", \"９\"],\n  gujr: [\"૦\", \"૧\", \"૨\", \"૩\", \"૪\", \"૫\", \"૬\", \"૭\", \"૮\", \"૯\"],\n  guru: [\"੦\", \"੧\", \"੨\", \"੩\", \"੪\", \"੫\", \"੬\", \"੭\", \"੮\", \"੯\"],\n  hanidec: [\"〇\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"],\n  khmr: [\"០\", \"១\", \"២\", \"៣\", \"៤\", \"៥\", \"៦\", \"៧\", \"៨\", \"៩\"],\n  knda: [\"೦\", \"೧\", \"೨\", \"೩\", \"೪\", \"೫\", \"೬\", \"೭\", \"೮\", \"೯\"],\n  laoo: [\"໐\", \"໑\", \"໒\", \"໓\", \"໔\", \"໕\", \"໖\", \"໗\", \"໘\", \"໙\"],\n  latn: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"],\n  limb: [\"᥆\", \"᥇\", \"᥈\", \"᥉\", \"᥊\", \"᥋\", \"᥌\", \"᥍\", \"᥎\", \"᥏\"],\n  mlym: [\"൦\", \"൧\", \"൨\", \"൩\", \"൪\", \"൫\", \"൬\", \"൭\", \"൮\", \"൯\"],\n  mong: [\"᠐\", \"᠑\", \"᠒\", \"᠓\", \"᠔\", \"᠕\", \"᠖\", \"᠗\", \"᠘\", \"᠙\"],\n  mymr: [\"၀\", \"၁\", \"၂\", \"၃\", \"၄\", \"၅\", \"၆\", \"၇\", \"၈\", \"၉\"],\n  orya: [\"୦\", \"୧\", \"୨\", \"୩\", \"୪\", \"୫\", \"୬\", \"୭\", \"୮\", \"୯\"],\n  tamldec: [\"௦\", \"௧\", \"௨\", \"௩\", \"௪\", \"௫\", \"௬\", \"௭\", \"௮\", \"௯\"],\n  telu: [\"౦\", \"౧\", \"౨\", \"౩\", \"౪\", \"౫\", \"౬\", \"౭\", \"౮\", \"౯\"],\n  thai: [\"๐\", \"๑\", \"๒\", \"๓\", \"๔\", \"๕\", \"๖\", \"๗\", \"๘\", \"๙\"],\n  tibt: [\"༠\", \"༡\", \"༢\", \"༣\", \"༤\", \"༥\", \"༦\", \"༧\", \"༨\", \"༩\"]\n};\n/**\n * This function provides access to the locale and formatting options computed\n * during initialization of the object.\n *\n * The function returns a new object whose properties and attributes are set as\n * if constructed by an object literal assigning to each of the following\n * properties the value of the corresponding internal property of this\n * NumberFormat object (see 11.4): locale, numberingSystem, style, currency,\n * currencyDisplay, minimumIntegerDigits, minimumFractionDigits,\n * maximumFractionDigits, minimumSignificantDigits, maximumSignificantDigits, and\n * useGrouping. Properties whose corresponding internal properties are not present\n * are not assigned.\n */\n\n/* 11.3.3 */\n\ndefineProperty(Intl.NumberFormat.prototype, 'resolvedOptions', {\n  configurable: true,\n  writable: true,\n  value: function value() {\n    var prop = void 0,\n        descs = new Record(),\n        props = ['locale', 'numberingSystem', 'style', 'currency', 'currencyDisplay', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits', 'useGrouping'],\n        internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this); // Satisfy test 11.3_b\n\n    if (!internal || !internal['[[initializedNumberFormat]]']) throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.NumberFormat object.');\n\n    for (var i = 0, max = props.length; i < max; i++) {\n      if (hop.call(internal, prop = '[[' + props[i] + ']]')) descs[props[i]] = {\n        value: internal[prop],\n        writable: true,\n        configurable: true,\n        enumerable: true\n      };\n    }\n\n    return objCreate({}, descs);\n  }\n});\n/* jslint esnext: true */\n// Match these datetime components in a CLDR pattern, except those in single quotes\n\nvar expDTComponents = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g; // trim patterns after transformations\n\nvar expPatternTrimmer = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g; // Skip over patterns with these datetime components because we don't have data\n// to back them up:\n// timezone, weekday, amoung others\n\nvar unwantedDTCs = /[rqQASjJgwWIQq]/; // xXVO were removed from this list in favor of computing matches with timeZoneName values but printing as empty string\n\nvar dtKeys = [\"era\", \"year\", \"month\", \"day\", \"weekday\", \"quarter\"];\nvar tmKeys = [\"hour\", \"minute\", \"second\", \"hour12\", \"timeZoneName\"];\n\nfunction isDateFormatOnly(obj) {\n  for (var i = 0; i < tmKeys.length; i += 1) {\n    if (obj.hasOwnProperty(tmKeys[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isTimeFormatOnly(obj) {\n  for (var i = 0; i < dtKeys.length; i += 1) {\n    if (obj.hasOwnProperty(dtKeys[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction joinDateAndTimeFormats(dateFormatObj, timeFormatObj) {\n  var o = {\n    _: {}\n  };\n\n  for (var i = 0; i < dtKeys.length; i += 1) {\n    if (dateFormatObj[dtKeys[i]]) {\n      o[dtKeys[i]] = dateFormatObj[dtKeys[i]];\n    }\n\n    if (dateFormatObj._[dtKeys[i]]) {\n      o._[dtKeys[i]] = dateFormatObj._[dtKeys[i]];\n    }\n  }\n\n  for (var j = 0; j < tmKeys.length; j += 1) {\n    if (timeFormatObj[tmKeys[j]]) {\n      o[tmKeys[j]] = timeFormatObj[tmKeys[j]];\n    }\n\n    if (timeFormatObj._[tmKeys[j]]) {\n      o._[tmKeys[j]] = timeFormatObj._[tmKeys[j]];\n    }\n  }\n\n  return o;\n}\n\nfunction computeFinalPatterns(formatObj) {\n  // From http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns:\n  //  'In patterns, two single quotes represents a literal single quote, either\n  //   inside or outside single quotes. Text within single quotes is not\n  //   interpreted in any way (except for two adjacent single quotes).'\n  formatObj.pattern12 = formatObj.extendedPattern.replace(/'([^']*)'/g, function ($0, literal) {\n    return literal ? literal : \"'\";\n  }); // pattern 12 is always the default. we can produce the 24 by removing {ampm}\n\n  formatObj.pattern = formatObj.pattern12.replace('{ampm}', '').replace(expPatternTrimmer, '');\n  return formatObj;\n}\n\nfunction expDTComponentsMeta($0, formatObj) {\n  switch ($0.charAt(0)) {\n    // --- Era\n    case 'G':\n      formatObj.era = ['short', 'short', 'short', 'long', 'narrow'][$0.length - 1];\n      return '{era}';\n    // --- Year\n\n    case 'y':\n    case 'Y':\n    case 'u':\n    case 'U':\n    case 'r':\n      formatObj.year = $0.length === 2 ? '2-digit' : 'numeric';\n      return '{year}';\n    // --- Quarter (not supported in this polyfill)\n\n    case 'Q':\n    case 'q':\n      formatObj.quarter = ['numeric', '2-digit', 'short', 'long', 'narrow'][$0.length - 1];\n      return '{quarter}';\n    // --- Month\n\n    case 'M':\n    case 'L':\n      formatObj.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][$0.length - 1];\n      return '{month}';\n    // --- Week (not supported in this polyfill)\n\n    case 'w':\n      // week of the year\n      formatObj.week = $0.length === 2 ? '2-digit' : 'numeric';\n      return '{weekday}';\n\n    case 'W':\n      // week of the month\n      formatObj.week = 'numeric';\n      return '{weekday}';\n    // --- Day\n\n    case 'd':\n      // day of the month\n      formatObj.day = $0.length === 2 ? '2-digit' : 'numeric';\n      return '{day}';\n\n    case 'D': // day of the year\n\n    case 'F': // day of the week\n\n    case 'g':\n      // 1..n: Modified Julian day\n      formatObj.day = 'numeric';\n      return '{day}';\n    // --- Week Day\n\n    case 'E':\n      // day of the week\n      formatObj.weekday = ['short', 'short', 'short', 'long', 'narrow', 'short'][$0.length - 1];\n      return '{weekday}';\n\n    case 'e':\n      // local day of the week\n      formatObj.weekday = ['numeric', '2-digit', 'short', 'long', 'narrow', 'short'][$0.length - 1];\n      return '{weekday}';\n\n    case 'c':\n      // stand alone local day of the week\n      formatObj.weekday = ['numeric', undefined, 'short', 'long', 'narrow', 'short'][$0.length - 1];\n      return '{weekday}';\n    // --- Period\n\n    case 'a': // AM, PM\n\n    case 'b': // am, pm, noon, midnight\n\n    case 'B':\n      // flexible day periods\n      formatObj.hour12 = true;\n      return '{ampm}';\n    // --- Hour\n\n    case 'h':\n    case 'H':\n      formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';\n      return '{hour}';\n\n    case 'k':\n    case 'K':\n      formatObj.hour12 = true; // 12-hour-cycle time formats (using h or K)\n\n      formatObj.hour = $0.length === 2 ? '2-digit' : 'numeric';\n      return '{hour}';\n    // --- Minute\n\n    case 'm':\n      formatObj.minute = $0.length === 2 ? '2-digit' : 'numeric';\n      return '{minute}';\n    // --- Second\n\n    case 's':\n      formatObj.second = $0.length === 2 ? '2-digit' : 'numeric';\n      return '{second}';\n\n    case 'S':\n    case 'A':\n      formatObj.second = 'numeric';\n      return '{second}';\n    // --- Timezone\n\n    case 'z': // 1..3, 4: specific non-location format\n\n    case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n\n    case 'O': // 1, 4: miliseconds in day short, long\n\n    case 'v': // 1, 4: generic non-location format\n\n    case 'V': // 1, 2, 3, 4: time zone ID or city\n\n    case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n\n    case 'x':\n      // 1, 2, 3, 4: The ISO8601 varios formats\n      // this polyfill only supports much, for now, we are just doing something dummy\n      formatObj.timeZoneName = $0.length < 4 ? 'short' : 'long';\n      return '{timeZoneName}';\n  }\n}\n/**\n * Converts the CLDR availableFormats into the objects and patterns required by\n * the ECMAScript Internationalization API specification.\n */\n\n\nfunction createDateTimeFormat(skeleton, pattern) {\n  // we ignore certain patterns that are unsupported to avoid this expensive op.\n  if (unwantedDTCs.test(pattern)) return undefined;\n  var formatObj = {\n    originalPattern: pattern,\n    _: {}\n  }; // Replace the pattern string with the one required by the specification, whilst\n  // at the same time evaluating it for the subsets and formats\n\n  formatObj.extendedPattern = pattern.replace(expDTComponents, function ($0) {\n    // See which symbol we're dealing with\n    return expDTComponentsMeta($0, formatObj._);\n  }); // Match the skeleton string with the one required by the specification\n  // this implementation is based on the Date Field Symbol Table:\n  // http://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n  // Note: we are adding extra data to the formatObject even though this polyfill\n  //       might not support it.\n\n  skeleton.replace(expDTComponents, function ($0) {\n    // See which symbol we're dealing with\n    return expDTComponentsMeta($0, formatObj);\n  });\n  return computeFinalPatterns(formatObj);\n}\n/**\n * Processes DateTime formats from CLDR to an easier-to-parse format.\n * the result of this operation should be cached the first time a particular\n * calendar is analyzed.\n *\n * The specification requires we support at least the following subsets of\n * date/time components:\n *\n *   - 'weekday', 'year', 'month', 'day', 'hour', 'minute', 'second'\n *   - 'weekday', 'year', 'month', 'day'\n *   - 'year', 'month', 'day'\n *   - 'year', 'month'\n *   - 'month', 'day'\n *   - 'hour', 'minute', 'second'\n *   - 'hour', 'minute'\n *\n * We need to cherry pick at least these subsets from the CLDR data and convert\n * them into the pattern objects used in the ECMA-402 API.\n */\n\n\nfunction createDateTimeFormats(formats) {\n  var availableFormats = formats.availableFormats;\n  var timeFormats = formats.timeFormats;\n  var dateFormats = formats.dateFormats;\n  var result = [];\n  var skeleton = void 0,\n      pattern = void 0,\n      computed = void 0,\n      i = void 0,\n      j = void 0;\n  var timeRelatedFormats = [];\n  var dateRelatedFormats = []; // Map available (custom) formats into a pattern for createDateTimeFormats\n\n  for (skeleton in availableFormats) {\n    if (availableFormats.hasOwnProperty(skeleton)) {\n      pattern = availableFormats[skeleton];\n      computed = createDateTimeFormat(skeleton, pattern);\n\n      if (computed) {\n        result.push(computed); // in some cases, the format is only displaying date specific props\n        // or time specific props, in which case we need to also produce the\n        // combined formats.\n\n        if (isDateFormatOnly(computed)) {\n          dateRelatedFormats.push(computed);\n        } else if (isTimeFormatOnly(computed)) {\n          timeRelatedFormats.push(computed);\n        }\n      }\n    }\n  } // Map time formats into a pattern for createDateTimeFormats\n\n\n  for (skeleton in timeFormats) {\n    if (timeFormats.hasOwnProperty(skeleton)) {\n      pattern = timeFormats[skeleton];\n      computed = createDateTimeFormat(skeleton, pattern);\n\n      if (computed) {\n        result.push(computed);\n        timeRelatedFormats.push(computed);\n      }\n    }\n  } // Map date formats into a pattern for createDateTimeFormats\n\n\n  for (skeleton in dateFormats) {\n    if (dateFormats.hasOwnProperty(skeleton)) {\n      pattern = dateFormats[skeleton];\n      computed = createDateTimeFormat(skeleton, pattern);\n\n      if (computed) {\n        result.push(computed);\n        dateRelatedFormats.push(computed);\n      }\n    }\n  } // combine custom time and custom date formats when they are orthogonals to complete the\n  // formats supported by CLDR.\n  // This Algo is based on section \"Missing Skeleton Fields\" from:\n  // http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems\n\n\n  for (i = 0; i < timeRelatedFormats.length; i += 1) {\n    for (j = 0; j < dateRelatedFormats.length; j += 1) {\n      if (dateRelatedFormats[j].month === 'long') {\n        pattern = dateRelatedFormats[j].weekday ? formats.full : formats.long;\n      } else if (dateRelatedFormats[j].month === 'short') {\n        pattern = formats.medium;\n      } else {\n        pattern = formats.short;\n      }\n\n      computed = joinDateAndTimeFormats(dateRelatedFormats[j], timeRelatedFormats[i]);\n      computed.originalPattern = pattern;\n      computed.extendedPattern = pattern.replace('{0}', timeRelatedFormats[i].extendedPattern).replace('{1}', dateRelatedFormats[j].extendedPattern).replace(/^[,\\s]+|[,\\s]+$/gi, '');\n      result.push(computeFinalPatterns(computed));\n    }\n  }\n\n  return result;\n} // this represents the exceptions of the rule that are not covered by CLDR availableFormats\n// for single property configurations, they play no role when using multiple properties, and\n// those that are not in this table, are not exceptions or are not covered by the data we\n// provide.\n\n\nvar validSyntheticProps = {\n  second: {\n    numeric: 's',\n    '2-digit': 'ss'\n  },\n  minute: {\n    numeric: 'm',\n    '2-digit': 'mm'\n  },\n  year: {\n    numeric: 'y',\n    '2-digit': 'yy'\n  },\n  day: {\n    numeric: 'd',\n    '2-digit': 'dd'\n  },\n  month: {\n    numeric: 'L',\n    '2-digit': 'LL',\n    narrow: 'LLLLL',\n    short: 'LLL',\n    long: 'LLLL'\n  },\n  weekday: {\n    narrow: 'ccccc',\n    short: 'ccc',\n    long: 'cccc'\n  }\n};\n\nfunction generateSyntheticFormat(propName, propValue) {\n  if (validSyntheticProps[propName] && validSyntheticProps[propName][propValue]) {\n    var _ref2;\n\n    return _ref2 = {\n      originalPattern: validSyntheticProps[propName][propValue],\n      _: defineProperty$1({}, propName, propValue),\n      extendedPattern: \"{\" + propName + \"}\"\n    }, defineProperty$1(_ref2, propName, propValue), defineProperty$1(_ref2, \"pattern12\", \"{\" + propName + \"}\"), defineProperty$1(_ref2, \"pattern\", \"{\" + propName + \"}\"), _ref2;\n  }\n} // An object map of date component keys, saves using a regex later\n\n\nvar dateWidths = objCreate(null, {\n  narrow: {},\n  short: {},\n  long: {}\n});\n/**\n * Returns a string for a date component, resolved using multiple inheritance as specified\n * as specified in the Unicode Technical Standard 35.\n */\n\nfunction resolveDateString(data, ca, component, width, key) {\n  // From http://www.unicode.org/reports/tr35/tr35.html#Multiple_Inheritance:\n  // 'In clearly specified instances, resources may inherit from within the same locale.\n  //  For example, ... the Buddhist calendar inherits from the Gregorian calendar.'\n  var obj = data[ca] && data[ca][component] ? data[ca][component] : data.gregory[component],\n      // \"sideways\" inheritance resolves strings when a key doesn't exist\n  alts = {\n    narrow: ['short', 'long'],\n    short: ['long', 'narrow'],\n    long: ['short', 'narrow']\n  },\n      //\n  resolved = hop.call(obj, width) ? obj[width] : hop.call(obj, alts[width][0]) ? obj[alts[width][0]] : obj[alts[width][1]]; // `key` wouldn't be specified for components 'dayPeriods'\n\n  return key !== null ? resolved[key] : resolved;\n} // Define the DateTimeFormat constructor internally so it cannot be tainted\n\n\nfunction DateTimeFormatConstructor() {\n  var locales = arguments[0];\n  var options = arguments[1];\n\n  if (!this || this === Intl) {\n    return new Intl.DateTimeFormat(locales, options);\n  }\n\n  return InitializeDateTimeFormat(toObject(this), locales, options);\n}\n\ndefineProperty(Intl, 'DateTimeFormat', {\n  configurable: true,\n  writable: true,\n  value: DateTimeFormatConstructor\n}); // Must explicitly set prototypes as unwritable\n\ndefineProperty(DateTimeFormatConstructor, 'prototype', {\n  writable: false\n});\n/**\n * The abstract operation InitializeDateTimeFormat accepts the arguments dateTimeFormat\n * (which must be an object), locales, and options. It initializes dateTimeFormat as a\n * DateTimeFormat object.\n */\n\nfunction\n/* 12.1.1.1 */\nInitializeDateTimeFormat(dateTimeFormat, locales, options) {\n  // This will be a internal properties object if we're not already initialized\n  var internal = getInternalProperties(dateTimeFormat); // Create an object whose props can be used to restore the values of RegExp props\n\n  var regexpRestore = createRegExpRestore(); // 1. If dateTimeFormat has an [[initializedIntlObject]] internal property with\n  //    value true, throw a TypeError exception.\n\n  if (internal['[[initializedIntlObject]]'] === true) throw new TypeError('`this` object has already been initialized as an Intl object'); // Need this to access the `internal` object\n\n  defineProperty(dateTimeFormat, '__getInternalProperties', {\n    value: function value() {\n      // NOTE: Non-standard, for internal use only\n      if (arguments[0] === secret) return internal;\n    }\n  }); // 2. Set the [[initializedIntlObject]] internal property of numberFormat to true.\n\n  internal['[[initializedIntlObject]]'] = true; // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n  //    abstract operation (defined in 9.2.1) with argument locales.\n\n  var requestedLocales = CanonicalizeLocaleList(locales); // 4. Let options be the result of calling the ToDateTimeOptions abstract\n  //    operation (defined below) with arguments options, \"any\", and \"date\".\n\n  options = ToDateTimeOptions(options, 'any', 'date'); // 5. Let opt be a new Record.\n\n  var opt = new Record(); // 6. Let matcher be the result of calling the GetOption abstract operation\n  //    (defined in 9.2.9) with arguments options, \"localeMatcher\", \"string\", a List\n  //    containing the two String values \"lookup\" and \"best fit\", and \"best fit\".\n\n  var matcher = GetOption(options, 'localeMatcher', 'string', new List('lookup', 'best fit'), 'best fit'); // 7. Set opt.[[localeMatcher]] to matcher.\n\n  opt['[[localeMatcher]]'] = matcher; // 8. Let DateTimeFormat be the standard built-in object that is the initial\n  //    value of Intl.DateTimeFormat.\n\n  var DateTimeFormat = internals.DateTimeFormat; // This is what we *really* need\n  // 9. Let localeData be the value of the [[localeData]] internal property of\n  //    DateTimeFormat.\n\n  var localeData = DateTimeFormat['[[localeData]]']; // 10. Let r be the result of calling the ResolveLocale abstract operation\n  //     (defined in 9.2.5) with the [[availableLocales]] internal property of\n  //      DateTimeFormat, requestedLocales, opt, the [[relevantExtensionKeys]]\n  //      internal property of DateTimeFormat, and localeData.\n\n  var r = ResolveLocale(DateTimeFormat['[[availableLocales]]'], requestedLocales, opt, DateTimeFormat['[[relevantExtensionKeys]]'], localeData); // 11. Set the [[locale]] internal property of dateTimeFormat to the value of\n  //     r.[[locale]].\n\n  internal['[[locale]]'] = r['[[locale]]']; // 12. Set the [[calendar]] internal property of dateTimeFormat to the value of\n  //     r.[[ca]].\n\n  internal['[[calendar]]'] = r['[[ca]]']; // 13. Set the [[numberingSystem]] internal property of dateTimeFormat to the value of\n  //     r.[[nu]].\n\n  internal['[[numberingSystem]]'] = r['[[nu]]']; // The specification doesn't tell us to do this, but it's helpful later on\n\n  internal['[[dataLocale]]'] = r['[[dataLocale]]']; // 14. Let dataLocale be the value of r.[[dataLocale]].\n\n  var dataLocale = r['[[dataLocale]]']; // 15. Let tz be the result of calling the [[Get]] internal method of options with\n  //     argument \"timeZone\".\n\n  var tz = options.timeZone; // 16. If tz is not undefined, then\n\n  if (tz !== undefined) {\n    // a. Let tz be ToString(tz).\n    // b. Convert tz to upper case as described in 6.1.\n    //    NOTE: If an implementation accepts additional time zone values, as permitted\n    //          under certain conditions by the Conformance clause, different casing\n    //          rules apply.\n    tz = toLatinUpperCase(tz); // c. If tz is not \"UTC\", then throw a RangeError exception.\n    // ###TODO: accept more time zones###\n\n    if (tz !== 'UTC') throw new RangeError('timeZone is not supported.');\n  } // 17. Set the [[timeZone]] internal property of dateTimeFormat to tz.\n\n\n  internal['[[timeZone]]'] = tz; // 18. Let opt be a new Record.\n\n  opt = new Record(); // 19. For each row of Table 3, except the header row, do:\n\n  for (var prop in dateTimeComponents) {\n    if (!hop.call(dateTimeComponents, prop)) continue; // 20. Let prop be the name given in the Property column of the row.\n    // 21. Let value be the result of calling the GetOption abstract operation,\n    //     passing as argument options, the name given in the Property column of the\n    //     row, \"string\", a List containing the strings given in the Values column of\n    //     the row, and undefined.\n\n    var value = GetOption(options, prop, 'string', dateTimeComponents[prop]); // 22. Set opt.[[<prop>]] to value.\n\n    opt['[[' + prop + ']]'] = value;\n  } // Assigned a value below\n\n\n  var bestFormat = void 0; // 23. Let dataLocaleData be the result of calling the [[Get]] internal method of\n  //     localeData with argument dataLocale.\n\n  var dataLocaleData = localeData[dataLocale]; // 24. Let formats be the result of calling the [[Get]] internal method of\n  //     dataLocaleData with argument \"formats\".\n  //     Note: we process the CLDR formats into the spec'd structure\n\n  var formats = ToDateTimeFormats(dataLocaleData.formats); // 25. Let matcher be the result of calling the GetOption abstract operation with\n  //     arguments options, \"formatMatcher\", \"string\", a List containing the two String\n  //     values \"basic\" and \"best fit\", and \"best fit\".\n\n  matcher = GetOption(options, 'formatMatcher', 'string', new List('basic', 'best fit'), 'best fit'); // Optimization: caching the processed formats as a one time operation by\n  // replacing the initial structure from localeData\n\n  dataLocaleData.formats = formats; // 26. If matcher is \"basic\", then\n\n  if (matcher === 'basic') {\n    // 27. Let bestFormat be the result of calling the BasicFormatMatcher abstract\n    //     operation (defined below) with opt and formats.\n    bestFormat = BasicFormatMatcher(opt, formats); // 28. Else\n  } else {\n    {\n      // diverging\n      var _hr = GetOption(options, 'hour12', 'boolean'\n      /*, undefined, undefined*/\n      );\n\n      opt.hour12 = _hr === undefined ? dataLocaleData.hour12 : _hr;\n    } // 29. Let bestFormat be the result of calling the BestFitFormatMatcher\n    //     abstract operation (defined below) with opt and formats.\n\n    bestFormat = BestFitFormatMatcher(opt, formats);\n  } // 30. For each row in Table 3, except the header row, do\n\n\n  for (var _prop in dateTimeComponents) {\n    if (!hop.call(dateTimeComponents, _prop)) continue; // a. Let prop be the name given in the Property column of the row.\n    // b. Let pDesc be the result of calling the [[GetOwnProperty]] internal method of\n    //    bestFormat with argument prop.\n    // c. If pDesc is not undefined, then\n\n    if (hop.call(bestFormat, _prop)) {\n      // i. Let p be the result of calling the [[Get]] internal method of bestFormat\n      //    with argument prop.\n      var p = bestFormat[_prop];\n      {\n        // diverging\n        p = bestFormat._ && hop.call(bestFormat._, _prop) ? bestFormat._[_prop] : p;\n      } // ii. Set the [[<prop>]] internal property of dateTimeFormat to p.\n\n      internal['[[' + _prop + ']]'] = p;\n    }\n  }\n\n  var pattern = void 0; // Assigned a value below\n  // 31. Let hr12 be the result of calling the GetOption abstract operation with\n  //     arguments options, \"hour12\", \"boolean\", undefined, and undefined.\n\n  var hr12 = GetOption(options, 'hour12', 'boolean'\n  /*, undefined, undefined*/\n  ); // 32. If dateTimeFormat has an internal property [[hour]], then\n\n  if (internal['[[hour]]']) {\n    // a. If hr12 is undefined, then let hr12 be the result of calling the [[Get]]\n    //    internal method of dataLocaleData with argument \"hour12\".\n    hr12 = hr12 === undefined ? dataLocaleData.hour12 : hr12; // b. Set the [[hour12]] internal property of dateTimeFormat to hr12.\n\n    internal['[[hour12]]'] = hr12; // c. If hr12 is true, then\n\n    if (hr12 === true) {\n      // i. Let hourNo0 be the result of calling the [[Get]] internal method of\n      //    dataLocaleData with argument \"hourNo0\".\n      var hourNo0 = dataLocaleData.hourNo0; // ii. Set the [[hourNo0]] internal property of dateTimeFormat to hourNo0.\n\n      internal['[[hourNo0]]'] = hourNo0; // iii. Let pattern be the result of calling the [[Get]] internal method of\n      //      bestFormat with argument \"pattern12\".\n\n      pattern = bestFormat.pattern12;\n    } // d. Else\n    else // i. Let pattern be the result of calling the [[Get]] internal method of\n      //    bestFormat with argument \"pattern\".\n      pattern = bestFormat.pattern;\n  } // 33. Else\n  else // a. Let pattern be the result of calling the [[Get]] internal method of\n    //    bestFormat with argument \"pattern\".\n    pattern = bestFormat.pattern; // 34. Set the [[pattern]] internal property of dateTimeFormat to pattern.\n\n\n  internal['[[pattern]]'] = pattern; // 35. Set the [[boundFormat]] internal property of dateTimeFormat to undefined.\n\n  internal['[[boundFormat]]'] = undefined; // 36. Set the [[initializedDateTimeFormat]] internal property of dateTimeFormat to\n  //     true.\n\n  internal['[[initializedDateTimeFormat]]'] = true; // In ES3, we need to pre-bind the format() function\n\n  if (es3) dateTimeFormat.format = GetFormatDateTime.call(dateTimeFormat); // Restore the RegExp properties\n\n  regexpRestore(); // Return the newly initialised object\n\n  return dateTimeFormat;\n}\n/**\n * Several DateTimeFormat algorithms use values from the following table, which provides\n * property names and allowable values for the components of date and time formats:\n */\n\n\nvar dateTimeComponents = {\n  weekday: [\"narrow\", \"short\", \"long\"],\n  era: [\"narrow\", \"short\", \"long\"],\n  year: [\"2-digit\", \"numeric\"],\n  month: [\"2-digit\", \"numeric\", \"narrow\", \"short\", \"long\"],\n  day: [\"2-digit\", \"numeric\"],\n  hour: [\"2-digit\", \"numeric\"],\n  minute: [\"2-digit\", \"numeric\"],\n  second: [\"2-digit\", \"numeric\"],\n  timeZoneName: [\"short\", \"long\"]\n};\n/**\n * When the ToDateTimeOptions abstract operation is called with arguments options,\n * required, and defaults, the following steps are taken:\n */\n\nfunction ToDateTimeFormats(formats) {\n  if (Object.prototype.toString.call(formats) === '[object Array]') {\n    return formats;\n  }\n\n  return createDateTimeFormats(formats);\n}\n/**\n * When the ToDateTimeOptions abstract operation is called with arguments options,\n * required, and defaults, the following steps are taken:\n */\n\n\nfunction ToDateTimeOptions(options, required, defaults) {\n  // 1. If options is undefined, then let options be null, else let options be\n  //    ToObject(options).\n  if (options === undefined) options = null;else {\n    // (#12) options needs to be a Record, but it also needs to inherit properties\n    var opt2 = toObject(options);\n    options = new Record();\n\n    for (var k in opt2) {\n      options[k] = opt2[k];\n    }\n  } // 2. Let create be the standard built-in function object defined in ES5, 15.2.3.5.\n\n  var create = objCreate; // 3. Let options be the result of calling the [[Call]] internal method of create with\n  //    undefined as the this value and an argument list containing the single item\n  //    options.\n\n  options = create(options); // 4. Let needDefaults be true.\n\n  var needDefaults = true; // 5. If required is \"date\" or \"any\", then\n\n  if (required === 'date' || required === 'any') {\n    // a. For each of the property names \"weekday\", \"year\", \"month\", \"day\":\n    // i. If the result of calling the [[Get]] internal method of options with the\n    //    property name is not undefined, then let needDefaults be false.\n    if (options.weekday !== undefined || options.year !== undefined || options.month !== undefined || options.day !== undefined) needDefaults = false;\n  } // 6. If required is \"time\" or \"any\", then\n\n\n  if (required === 'time' || required === 'any') {\n    // a. For each of the property names \"hour\", \"minute\", \"second\":\n    // i. If the result of calling the [[Get]] internal method of options with the\n    //    property name is not undefined, then let needDefaults be false.\n    if (options.hour !== undefined || options.minute !== undefined || options.second !== undefined) needDefaults = false;\n  } // 7. If needDefaults is true and defaults is either \"date\" or \"all\", then\n\n\n  if (needDefaults && (defaults === 'date' || defaults === 'all')) // a. For each of the property names \"year\", \"month\", \"day\":\n    // i. Call the [[DefineOwnProperty]] internal method of options with the\n    //    property name, Property Descriptor {[[Value]]: \"numeric\", [[Writable]]:\n    //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\n    options.year = options.month = options.day = 'numeric'; // 8. If needDefaults is true and defaults is either \"time\" or \"all\", then\n\n  if (needDefaults && (defaults === 'time' || defaults === 'all')) // a. For each of the property names \"hour\", \"minute\", \"second\":\n    // i. Call the [[DefineOwnProperty]] internal method of options with the\n    //    property name, Property Descriptor {[[Value]]: \"numeric\", [[Writable]]:\n    //    true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\n    options.hour = options.minute = options.second = 'numeric'; // 9. Return options.\n\n  return options;\n}\n/**\n * When the BasicFormatMatcher abstract operation is called with two arguments options and\n * formats, the following steps are taken:\n */\n\n\nfunction BasicFormatMatcher(options, formats) {\n  // 1. Let removalPenalty be 120.\n  var removalPenalty = 120; // 2. Let additionPenalty be 20.\n\n  var additionPenalty = 20; // 3. Let longLessPenalty be 8.\n\n  var longLessPenalty = 8; // 4. Let longMorePenalty be 6.\n\n  var longMorePenalty = 6; // 5. Let shortLessPenalty be 6.\n\n  var shortLessPenalty = 6; // 6. Let shortMorePenalty be 3.\n\n  var shortMorePenalty = 3; // 7. Let bestScore be -Infinity.\n\n  var bestScore = -Infinity; // 8. Let bestFormat be undefined.\n\n  var bestFormat = void 0; // 9. Let i be 0.\n\n  var i = 0; // 10. Assert: formats is an Array object.\n  // 11. Let len be the result of calling the [[Get]] internal method of formats with argument \"length\".\n\n  var len = formats.length; // 12. Repeat while i < len:\n\n  while (i < len) {\n    // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).\n    var format = formats[i]; // b. Let score be 0.\n\n    var score = 0; // c. For each property shown in Table 3:\n\n    for (var property in dateTimeComponents) {\n      if (!hop.call(dateTimeComponents, property)) continue; // i. Let optionsProp be options.[[<property>]].\n\n      var optionsProp = options['[[' + property + ']]']; // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format\n      //     with argument property.\n      // iii. If formatPropDesc is not undefined, then\n      //     1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.\n\n      var formatProp = hop.call(format, property) ? format[property] : undefined; // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by\n      //     additionPenalty.\n\n      if (optionsProp === undefined && formatProp !== undefined) score -= additionPenalty; // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by\n      //    removalPenalty.\n      else if (optionsProp !== undefined && formatProp === undefined) score -= removalPenalty; // vi. Else\n        else {\n            // 1. Let values be the array [\"2-digit\", \"numeric\", \"narrow\", \"short\",\n            //    \"long\"].\n            var values = ['2-digit', 'numeric', 'narrow', 'short', 'long']; // 2. Let optionsPropIndex be the index of optionsProp within values.\n\n            var optionsPropIndex = arrIndexOf.call(values, optionsProp); // 3. Let formatPropIndex be the index of formatProp within values.\n\n            var formatPropIndex = arrIndexOf.call(values, formatProp); // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).\n\n            var delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2); // 5. If delta = 2, decrease score by longMorePenalty.\n\n            if (delta === 2) score -= longMorePenalty; // 6. Else if delta = 1, decrease score by shortMorePenalty.\n            else if (delta === 1) score -= shortMorePenalty; // 7. Else if delta = -1, decrease score by shortLessPenalty.\n              else if (delta === -1) score -= shortLessPenalty; // 8. Else if delta = -2, decrease score by longLessPenalty.\n                else if (delta === -2) score -= longLessPenalty;\n          }\n    } // d. If score > bestScore, then\n\n\n    if (score > bestScore) {\n      // i. Let bestScore be score.\n      bestScore = score; // ii. Let bestFormat be format.\n\n      bestFormat = format;\n    } // e. Increase i by 1.\n\n\n    i++;\n  } // 13. Return bestFormat.\n\n\n  return bestFormat;\n}\n/**\n * When the BestFitFormatMatcher abstract operation is called with two arguments options\n * and formats, it performs implementation dependent steps, which should return a set of\n * component representations that a typical user of the selected locale would perceive as\n * at least as good as the one returned by BasicFormatMatcher.\n *\n * This polyfill defines the algorithm to be the same as BasicFormatMatcher,\n * with the addition of bonus points awarded where the requested format is of\n * the same data type as the potentially matching format.\n *\n * This algo relies on the concept of closest distance matching described here:\n * http://unicode.org/reports/tr35/tr35-dates.html#Matching_Skeletons\n * Typically a “best match” is found using a closest distance match, such as:\n *\n * Symbols requesting a best choice for the locale are replaced.\n *      j → one of {H, k, h, K}; C → one of {a, b, B}\n * -> Covered by cldr.js matching process\n *\n * For fields with symbols representing the same type (year, month, day, etc):\n *     Most symbols have a small distance from each other.\n *         M ≅ L; E ≅ c; a ≅ b ≅ B; H ≅ k ≅ h ≅ K; ...\n *     -> Covered by cldr.js matching process\n *\n *     Width differences among fields, other than those marking text vs numeric, are given small distance from each other.\n *         MMM ≅ MMMM\n *         MM ≅ M\n *     Numeric and text fields are given a larger distance from each other.\n *         MMM ≈ MM\n *     Symbols representing substantial differences (week of year vs week of month) are given much larger a distances from each other.\n *         d ≋ D; ...\n *     Missing or extra fields cause a match to fail. (But see Missing Skeleton Fields).\n *\n *\n * For example,\n *\n *     { month: 'numeric', day: 'numeric' }\n *\n * should match\n *\n *     { month: '2-digit', day: '2-digit' }\n *\n * rather than\n *\n *     { month: 'short', day: 'numeric' }\n *\n * This makes sense because a user requesting a formatted date with numeric parts would\n * not expect to see the returned format containing narrow, short or long part names\n */\n\n\nfunction BestFitFormatMatcher(options, formats) {\n  /** Diverging: this block implements the hack for single property configuration, eg.:\n   *\n   *      `new Intl.DateTimeFormat('en', {day: 'numeric'})`\n   *\n   * should produce a single digit with the day of the month. This is needed because\n   * CLDR `availableFormats` data structure doesn't cover these cases.\n   */\n  {\n    var optionsPropNames = [];\n\n    for (var property in dateTimeComponents) {\n      if (!hop.call(dateTimeComponents, property)) continue;\n\n      if (options['[[' + property + ']]'] !== undefined) {\n        optionsPropNames.push(property);\n      }\n    }\n\n    if (optionsPropNames.length === 1) {\n      var _bestFormat = generateSyntheticFormat(optionsPropNames[0], options['[[' + optionsPropNames[0] + ']]']);\n\n      if (_bestFormat) {\n        return _bestFormat;\n      }\n    }\n  } // 1. Let removalPenalty be 120.\n\n  var removalPenalty = 120; // 2. Let additionPenalty be 20.\n\n  var additionPenalty = 20; // 3. Let longLessPenalty be 8.\n\n  var longLessPenalty = 8; // 4. Let longMorePenalty be 6.\n\n  var longMorePenalty = 6; // 5. Let shortLessPenalty be 6.\n\n  var shortLessPenalty = 6; // 6. Let shortMorePenalty be 3.\n\n  var shortMorePenalty = 3;\n  var patternPenalty = 2;\n  var hour12Penalty = 1; // 7. Let bestScore be -Infinity.\n\n  var bestScore = -Infinity; // 8. Let bestFormat be undefined.\n\n  var bestFormat = void 0; // 9. Let i be 0.\n\n  var i = 0; // 10. Assert: formats is an Array object.\n  // 11. Let len be the result of calling the [[Get]] internal method of formats with argument \"length\".\n\n  var len = formats.length; // 12. Repeat while i < len:\n\n  while (i < len) {\n    // a. Let format be the result of calling the [[Get]] internal method of formats with argument ToString(i).\n    var format = formats[i]; // b. Let score be 0.\n\n    var score = 0; // c. For each property shown in Table 3:\n\n    for (var _property in dateTimeComponents) {\n      if (!hop.call(dateTimeComponents, _property)) continue; // i. Let optionsProp be options.[[<property>]].\n\n      var optionsProp = options['[[' + _property + ']]']; // ii. Let formatPropDesc be the result of calling the [[GetOwnProperty]] internal method of format\n      //     with argument property.\n      // iii. If formatPropDesc is not undefined, then\n      //     1. Let formatProp be the result of calling the [[Get]] internal method of format with argument property.\n\n      var formatProp = hop.call(format, _property) ? format[_property] : undefined; // Diverging: using the default properties produced by the pattern/skeleton\n      // to match it with user options, and apply a penalty\n\n      var patternProp = hop.call(format._, _property) ? format._[_property] : undefined;\n\n      if (optionsProp !== patternProp) {\n        score -= patternPenalty;\n      } // iv. If optionsProp is undefined and formatProp is not undefined, then decrease score by\n      //     additionPenalty.\n\n\n      if (optionsProp === undefined && formatProp !== undefined) score -= additionPenalty; // v. Else if optionsProp is not undefined and formatProp is undefined, then decrease score by\n      //    removalPenalty.\n      else if (optionsProp !== undefined && formatProp === undefined) score -= removalPenalty; // vi. Else\n        else {\n            // 1. Let values be the array [\"2-digit\", \"numeric\", \"narrow\", \"short\",\n            //    \"long\"].\n            var values = ['2-digit', 'numeric', 'narrow', 'short', 'long']; // 2. Let optionsPropIndex be the index of optionsProp within values.\n\n            var optionsPropIndex = arrIndexOf.call(values, optionsProp); // 3. Let formatPropIndex be the index of formatProp within values.\n\n            var formatPropIndex = arrIndexOf.call(values, formatProp); // 4. Let delta be max(min(formatPropIndex - optionsPropIndex, 2), -2).\n\n            var delta = Math.max(Math.min(formatPropIndex - optionsPropIndex, 2), -2);\n            {\n              // diverging from spec\n              // When the bestFit argument is true, subtract additional penalty where data types are not the same\n              if (formatPropIndex <= 1 && optionsPropIndex >= 2 || formatPropIndex >= 2 && optionsPropIndex <= 1) {\n                // 5. If delta = 2, decrease score by longMorePenalty.\n                if (delta > 0) score -= longMorePenalty;else if (delta < 0) score -= longLessPenalty;\n              } else {\n                // 5. If delta = 2, decrease score by longMorePenalty.\n                if (delta > 1) score -= shortMorePenalty;else if (delta < -1) score -= shortLessPenalty;\n              }\n            }\n          }\n    }\n\n    {\n      // diverging to also take into consideration differences between 12 or 24 hours\n      // which is special for the best fit only.\n      if (format._.hour12 !== options.hour12) {\n        score -= hour12Penalty;\n      }\n    } // d. If score > bestScore, then\n\n    if (score > bestScore) {\n      // i. Let bestScore be score.\n      bestScore = score; // ii. Let bestFormat be format.\n\n      bestFormat = format;\n    } // e. Increase i by 1.\n\n\n    i++;\n  } // 13. Return bestFormat.\n\n\n  return bestFormat;\n}\n/* 12.2.3 */\n\n\ninternals.DateTimeFormat = {\n  '[[availableLocales]]': [],\n  '[[relevantExtensionKeys]]': ['ca', 'nu'],\n  '[[localeData]]': {}\n};\n/**\n * When the supportedLocalesOf method of Intl.DateTimeFormat is called, the\n * following steps are taken:\n */\n\n/* 12.2.2 */\n\ndefineProperty(Intl.DateTimeFormat, 'supportedLocalesOf', {\n  configurable: true,\n  writable: true,\n  value: fnBind.call(function (locales) {\n    // Bound functions only have the `this` value altered if being used as a constructor,\n    // this lets us imitate a native function that has no constructor\n    if (!hop.call(this, '[[availableLocales]]')) throw new TypeError('supportedLocalesOf() is not a constructor'); // Create an object whose props can be used to restore the values of RegExp props\n\n    var regexpRestore = createRegExpRestore(),\n        // 1. If options is not provided, then let options be undefined.\n    options = arguments[1],\n        // 2. Let availableLocales be the value of the [[availableLocales]] internal\n    //    property of the standard built-in object that is the initial value of\n    //    Intl.NumberFormat.\n    availableLocales = this['[[availableLocales]]'],\n        // 3. Let requestedLocales be the result of calling the CanonicalizeLocaleList\n    //    abstract operation (defined in 9.2.1) with argument locales.\n    requestedLocales = CanonicalizeLocaleList(locales); // Restore the RegExp properties\n\n    regexpRestore(); // 4. Return the result of calling the SupportedLocales abstract operation\n    //    (defined in 9.2.8) with arguments availableLocales, requestedLocales,\n    //    and options.\n\n    return SupportedLocales(availableLocales, requestedLocales, options);\n  }, internals.NumberFormat)\n});\n/**\n * This named accessor property returns a function that formats a number\n * according to the effective locale and the formatting options of this\n * DateTimeFormat object.\n */\n\n/* 12.3.2 */\n\ndefineProperty(Intl.DateTimeFormat.prototype, 'format', {\n  configurable: true,\n  get: GetFormatDateTime\n});\n\nfunction GetFormatDateTime() {\n  var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this); // Satisfy test 12.3_b\n\n  if (!internal || !internal['[[initializedDateTimeFormat]]']) throw new TypeError('`this` value for format() is not an initialized Intl.DateTimeFormat object.'); // The value of the [[Get]] attribute is a function that takes the following\n  // steps:\n  // 1. If the [[boundFormat]] internal property of this DateTimeFormat object\n  //    is undefined, then:\n\n  if (internal['[[boundFormat]]'] === undefined) {\n    // a. Let F be a Function object, with internal properties set as\n    //    specified for built-in functions in ES5, 15, or successor, and the\n    //    length property set to 0, that takes the argument date and\n    //    performs the following steps:\n    var F = function F() {\n      var date = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0]; //   i. If date is not provided or is undefined, then let x be the\n      //      result as if by the expression Date.now() where Date.now is\n      //      the standard built-in function defined in ES5, 15.9.4.4.\n      //  ii. Else let x be ToNumber(date).\n      // iii. Return the result of calling the FormatDateTime abstract\n      //      operation (defined below) with arguments this and x.\n\n      var x = date === undefined ? Date.now() : toNumber(date);\n      return FormatDateTime(this, x);\n    }; // b. Let bind be the standard built-in function object defined in ES5,\n    //    15.3.4.5.\n    // c. Let bf be the result of calling the [[Call]] internal method of\n    //    bind with F as the this value and an argument list containing\n    //    the single item this.\n\n\n    var bf = fnBind.call(F, this); // d. Set the [[boundFormat]] internal property of this NumberFormat\n    //    object to bf.\n\n    internal['[[boundFormat]]'] = bf;\n  } // Return the value of the [[boundFormat]] internal property of this\n  // NumberFormat object.\n\n\n  return internal['[[boundFormat]]'];\n}\n\nfunction formatToParts$1() {\n  var date = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n  var internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this);\n  if (!internal || !internal['[[initializedDateTimeFormat]]']) throw new TypeError('`this` value for formatToParts() is not an initialized Intl.DateTimeFormat object.');\n  var x = date === undefined ? Date.now() : toNumber(date);\n  return FormatToPartsDateTime(this, x);\n}\n\nObject.defineProperty(Intl.DateTimeFormat.prototype, 'formatToParts', {\n  enumerable: false,\n  writable: true,\n  configurable: true,\n  value: formatToParts$1\n});\n\nfunction CreateDateTimeParts(dateTimeFormat, x) {\n  // 1. If x is not a finite Number, then throw a RangeError exception.\n  if (!isFinite(x)) throw new RangeError('Invalid valid date passed to format');\n\n  var internal = dateTimeFormat.__getInternalProperties(secret); // Creating restore point for properties on the RegExp object... please wait\n\n  /* let regexpRestore = */\n\n\n  createRegExpRestore(); // ###TODO: review this\n  // 2. Let locale be the value of the [[locale]] internal property of dateTimeFormat.\n\n  var locale = internal['[[locale]]']; // 3. Let nf be the result of creating a new NumberFormat object as if by the\n  // expression new Intl.NumberFormat([locale], {useGrouping: false}) where\n  // Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.\n\n  var nf = new Intl.NumberFormat([locale], {\n    useGrouping: false\n  }); // 4. Let nf2 be the result of creating a new NumberFormat object as if by the\n  // expression new Intl.NumberFormat([locale], {minimumIntegerDigits: 2, useGrouping:\n  // false}) where Intl.NumberFormat is the standard built-in constructor defined in\n  // 11.1.3.\n\n  var nf2 = new Intl.NumberFormat([locale], {\n    minimumIntegerDigits: 2,\n    useGrouping: false\n  }); // 5. Let tm be the result of calling the ToLocalTime abstract operation (defined\n  // below) with x, the value of the [[calendar]] internal property of dateTimeFormat,\n  // and the value of the [[timeZone]] internal property of dateTimeFormat.\n\n  var tm = ToLocalTime(x, internal['[[calendar]]'], internal['[[timeZone]]']); // 6. Let result be the value of the [[pattern]] internal property of dateTimeFormat.\n\n  var pattern = internal['[[pattern]]']; // 7.\n\n  var result = new List(); // 8.\n\n  var index = 0; // 9.\n\n  var beginIndex = pattern.indexOf('{'); // 10.\n\n  var endIndex = 0; // Need the locale minus any extensions\n\n  var dataLocale = internal['[[dataLocale]]']; // Need the calendar data from CLDR\n\n  var localeData = internals.DateTimeFormat['[[localeData]]'][dataLocale].calendars;\n  var ca = internal['[[calendar]]']; // 11.\n\n  while (beginIndex !== -1) {\n    var fv = void 0; // a.\n\n    endIndex = pattern.indexOf('}', beginIndex); // b.\n\n    if (endIndex === -1) {\n      throw new Error('Unclosed pattern');\n    } // c.\n\n\n    if (beginIndex > index) {\n      arrPush.call(result, {\n        type: 'literal',\n        value: pattern.substring(index, beginIndex)\n      });\n    } // d.\n\n\n    var p = pattern.substring(beginIndex + 1, endIndex); // e.\n\n    if (dateTimeComponents.hasOwnProperty(p)) {\n      //   i. Let f be the value of the [[<p>]] internal property of dateTimeFormat.\n      var f = internal['[[' + p + ']]']; //  ii. Let v be the value of tm.[[<p>]].\n\n      var v = tm['[[' + p + ']]']; // iii. If p is \"year\" and v ≤ 0, then let v be 1 - v.\n\n      if (p === 'year' && v <= 0) {\n        v = 1 - v;\n      } //  iv. If p is \"month\", then increase v by 1.\n      else if (p === 'month') {\n          v++;\n        } //   v. If p is \"hour\" and the value of the [[hour12]] internal property of\n        //      dateTimeFormat is true, then\n        else if (p === 'hour' && internal['[[hour12]]'] === true) {\n            // 1. Let v be v modulo 12.\n            v = v % 12; // 2. If v is 0 and the value of the [[hourNo0]] internal property of\n            //    dateTimeFormat is true, then let v be 12.\n\n            if (v === 0 && internal['[[hourNo0]]'] === true) {\n              v = 12;\n            }\n          } //  vi. If f is \"numeric\", then\n\n\n      if (f === 'numeric') {\n        // 1. Let fv be the result of calling the FormatNumber abstract operation\n        //    (defined in 11.3.2) with arguments nf and v.\n        fv = FormatNumber(nf, v);\n      } // vii. Else if f is \"2-digit\", then\n      else if (f === '2-digit') {\n          // 1. Let fv be the result of calling the FormatNumber abstract operation\n          //    with arguments nf2 and v.\n          fv = FormatNumber(nf2, v); // 2. If the length of fv is greater than 2, let fv be the substring of fv\n          //    containing the last two characters.\n\n          if (fv.length > 2) {\n            fv = fv.slice(-2);\n          }\n        } // viii. Else if f is \"narrow\", \"short\", or \"long\", then let fv be a String\n        //     value representing f in the desired form; the String value depends upon\n        //     the implementation and the effective locale and calendar of\n        //     dateTimeFormat. If p is \"month\", then the String value may also depend\n        //     on whether dateTimeFormat has a [[day]] internal property. If p is\n        //     \"timeZoneName\", then the String value may also depend on the value of\n        //     the [[inDST]] field of tm.\n        else if (f in dateWidths) {\n            switch (p) {\n              case 'month':\n                fv = resolveDateString(localeData, ca, 'months', f, tm['[[' + p + ']]']);\n                break;\n\n              case 'weekday':\n                try {\n                  fv = resolveDateString(localeData, ca, 'days', f, tm['[[' + p + ']]']); // fv = resolveDateString(ca.days, f)[tm['[['+ p +']]']];\n                } catch (e) {\n                  throw new Error('Could not find weekday data for locale ' + locale);\n                }\n\n                break;\n\n              case 'timeZoneName':\n                fv = ''; // ###TODO\n\n                break;\n\n              case 'era':\n                try {\n                  fv = resolveDateString(localeData, ca, 'eras', f, tm['[[' + p + ']]']);\n                } catch (e) {\n                  throw new Error('Could not find era data for locale ' + locale);\n                }\n\n                break;\n\n              default:\n                fv = tm['[[' + p + ']]'];\n            }\n          } // ix\n\n\n      arrPush.call(result, {\n        type: p,\n        value: fv\n      }); // f.\n    } else if (p === 'ampm') {\n      // i.\n      var _v = tm['[[hour]]']; // ii./iii.\n\n      fv = resolveDateString(localeData, ca, 'dayPeriods', _v > 11 ? 'pm' : 'am', null); // iv.\n\n      arrPush.call(result, {\n        type: 'dayPeriod',\n        value: fv\n      }); // g.\n    } else {\n      arrPush.call(result, {\n        type: 'literal',\n        value: pattern.substring(beginIndex, endIndex + 1)\n      });\n    } // h.\n\n\n    index = endIndex + 1; // i.\n\n    beginIndex = pattern.indexOf('{', index);\n  } // 12.\n\n\n  if (endIndex < pattern.length - 1) {\n    arrPush.call(result, {\n      type: 'literal',\n      value: pattern.substr(endIndex + 1)\n    });\n  } // 13.\n\n\n  return result;\n}\n/**\n * When the FormatDateTime abstract operation is called with arguments dateTimeFormat\n * (which must be an object initialized as a DateTimeFormat) and x (which must be a Number\n * value), it returns a String value representing x (interpreted as a time value as\n * specified in ES5, 15.9.1.1) according to the effective locale and the formatting\n * options of dateTimeFormat.\n */\n\n\nfunction FormatDateTime(dateTimeFormat, x) {\n  var parts = CreateDateTimeParts(dateTimeFormat, x);\n  var result = '';\n\n  for (var i = 0; parts.length > i; i++) {\n    var part = parts[i];\n    result += part.value;\n  }\n\n  return result;\n}\n\nfunction FormatToPartsDateTime(dateTimeFormat, x) {\n  var parts = CreateDateTimeParts(dateTimeFormat, x);\n  var result = [];\n\n  for (var i = 0; parts.length > i; i++) {\n    var part = parts[i];\n    result.push({\n      type: part.type,\n      value: part.value\n    });\n  }\n\n  return result;\n}\n/**\n * When the ToLocalTime abstract operation is called with arguments date, calendar, and\n * timeZone, the following steps are taken:\n */\n\n\nfunction ToLocalTime(date, calendar, timeZone) {\n  // 1. Apply calendrical calculations on date for the given calendar and time zone to\n  //    produce weekday, era, year, month, day, hour, minute, second, and inDST values.\n  //    The calculations should use best available information about the specified\n  //    calendar and time zone. If the calendar is \"gregory\", then the calculations must\n  //    match the algorithms specified in ES5, 15.9.1, except that calculations are not\n  //    bound by the restrictions on the use of best available information on time zones\n  //    for local time zone adjustment and daylight saving time adjustment imposed by\n  //    ES5, 15.9.1.7 and 15.9.1.8.\n  // ###TODO###\n  var d = new Date(date),\n      m = 'get' + (timeZone || ''); // 2. Return a Record with fields [[weekday]], [[era]], [[year]], [[month]], [[day]],\n  //    [[hour]], [[minute]], [[second]], and [[inDST]], each with the corresponding\n  //    calculated value.\n\n  return new Record({\n    '[[weekday]]': d[m + 'Day'](),\n    '[[era]]': +(d[m + 'FullYear']() >= 0),\n    '[[year]]': d[m + 'FullYear'](),\n    '[[month]]': d[m + 'Month'](),\n    '[[day]]': d[m + 'Date'](),\n    '[[hour]]': d[m + 'Hours'](),\n    '[[minute]]': d[m + 'Minutes'](),\n    '[[second]]': d[m + 'Seconds'](),\n    '[[inDST]]': false // ###TODO###\n\n  });\n}\n/**\n * The function returns a new object whose properties and attributes are set as if\n * constructed by an object literal assigning to each of the following properties the\n * value of the corresponding internal property of this DateTimeFormat object (see 12.4):\n * locale, calendar, numberingSystem, timeZone, hour12, weekday, era, year, month, day,\n * hour, minute, second, and timeZoneName. Properties whose corresponding internal\n * properties are not present are not assigned.\n */\n\n/* 12.3.3 */\n\n\ndefineProperty(Intl.DateTimeFormat.prototype, 'resolvedOptions', {\n  writable: true,\n  configurable: true,\n  value: function value() {\n    var prop = void 0,\n        descs = new Record(),\n        props = ['locale', 'calendar', 'numberingSystem', 'timeZone', 'hour12', 'weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'],\n        internal = this !== null && babelHelpers$1[\"typeof\"](this) === 'object' && getInternalProperties(this); // Satisfy test 12.3_b\n\n    if (!internal || !internal['[[initializedDateTimeFormat]]']) throw new TypeError('`this` value for resolvedOptions() is not an initialized Intl.DateTimeFormat object.');\n\n    for (var i = 0, max = props.length; i < max; i++) {\n      if (hop.call(internal, prop = '[[' + props[i] + ']]')) descs[props[i]] = {\n        value: internal[prop],\n        writable: true,\n        configurable: true,\n        enumerable: true\n      };\n    }\n\n    return objCreate({}, descs);\n  }\n});\nvar ls = Intl.__localeSensitiveProtos = {\n  Number: {},\n  Date: {}\n};\n/**\n * When the toLocaleString method is called with optional arguments locales and options,\n * the following steps are taken:\n */\n\n/* 13.2.1 */\n\nls.Number.toLocaleString = function () {\n  // Satisfy test 13.2.1_1\n  if (Object.prototype.toString.call(this) !== '[object Number]') throw new TypeError('`this` value must be a number for Number.prototype.toLocaleString()'); // 1. Let x be this Number value (as defined in ES5, 15.7.4).\n  // 2. If locales is not provided, then let locales be undefined.\n  // 3. If options is not provided, then let options be undefined.\n  // 4. Let numberFormat be the result of creating a new object as if by the\n  //    expression new Intl.NumberFormat(locales, options) where\n  //    Intl.NumberFormat is the standard built-in constructor defined in 11.1.3.\n  // 5. Return the result of calling the FormatNumber abstract operation\n  //    (defined in 11.3.2) with arguments numberFormat and x.\n\n  return FormatNumber(new NumberFormatConstructor(arguments[0], arguments[1]), this);\n};\n/**\n * When the toLocaleString method is called with optional arguments locales and options,\n * the following steps are taken:\n */\n\n/* 13.3.1 */\n\n\nls.Date.toLocaleString = function () {\n  // Satisfy test 13.3.0_1\n  if (Object.prototype.toString.call(this) !== '[object Date]') throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleString()'); // 1. Let x be this time value (as defined in ES5, 15.9.5).\n\n  var x = +this; // 2. If x is NaN, then return \"Invalid Date\".\n\n  if (isNaN(x)) return 'Invalid Date'; // 3. If locales is not provided, then let locales be undefined.\n\n  var locales = arguments[0]; // 4. If options is not provided, then let options be undefined.\n\n  var options = arguments[1]; // 5. Let options be the result of calling the ToDateTimeOptions abstract\n  //    operation (defined in 12.1.1) with arguments options, \"any\", and \"all\".\n\n  options = ToDateTimeOptions(options, 'any', 'all'); // 6. Let dateTimeFormat be the result of creating a new object as if by the\n  //    expression new Intl.DateTimeFormat(locales, options) where\n  //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n\n  var dateTimeFormat = new DateTimeFormatConstructor(locales, options); // 7. Return the result of calling the FormatDateTime abstract operation (defined\n  //    in 12.3.2) with arguments dateTimeFormat and x.\n\n  return FormatDateTime(dateTimeFormat, x);\n};\n/**\n * When the toLocaleDateString method is called with optional arguments locales and\n * options, the following steps are taken:\n */\n\n/* 13.3.2 */\n\n\nls.Date.toLocaleDateString = function () {\n  // Satisfy test 13.3.0_1\n  if (Object.prototype.toString.call(this) !== '[object Date]') throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleDateString()'); // 1. Let x be this time value (as defined in ES5, 15.9.5).\n\n  var x = +this; // 2. If x is NaN, then return \"Invalid Date\".\n\n  if (isNaN(x)) return 'Invalid Date'; // 3. If locales is not provided, then let locales be undefined.\n\n  var locales = arguments[0],\n      // 4. If options is not provided, then let options be undefined.\n  options = arguments[1]; // 5. Let options be the result of calling the ToDateTimeOptions abstract\n  //    operation (defined in 12.1.1) with arguments options, \"date\", and \"date\".\n\n  options = ToDateTimeOptions(options, 'date', 'date'); // 6. Let dateTimeFormat be the result of creating a new object as if by the\n  //    expression new Intl.DateTimeFormat(locales, options) where\n  //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n\n  var dateTimeFormat = new DateTimeFormatConstructor(locales, options); // 7. Return the result of calling the FormatDateTime abstract operation (defined\n  //    in 12.3.2) with arguments dateTimeFormat and x.\n\n  return FormatDateTime(dateTimeFormat, x);\n};\n/**\n * When the toLocaleTimeString method is called with optional arguments locales and\n * options, the following steps are taken:\n */\n\n/* 13.3.3 */\n\n\nls.Date.toLocaleTimeString = function () {\n  // Satisfy test 13.3.0_1\n  if (Object.prototype.toString.call(this) !== '[object Date]') throw new TypeError('`this` value must be a Date instance for Date.prototype.toLocaleTimeString()'); // 1. Let x be this time value (as defined in ES5, 15.9.5).\n\n  var x = +this; // 2. If x is NaN, then return \"Invalid Date\".\n\n  if (isNaN(x)) return 'Invalid Date'; // 3. If locales is not provided, then let locales be undefined.\n\n  var locales = arguments[0]; // 4. If options is not provided, then let options be undefined.\n\n  var options = arguments[1]; // 5. Let options be the result of calling the ToDateTimeOptions abstract\n  //    operation (defined in 12.1.1) with arguments options, \"time\", and \"time\".\n\n  options = ToDateTimeOptions(options, 'time', 'time'); // 6. Let dateTimeFormat be the result of creating a new object as if by the\n  //    expression new Intl.DateTimeFormat(locales, options) where\n  //    Intl.DateTimeFormat is the standard built-in constructor defined in 12.1.3.\n\n  var dateTimeFormat = new DateTimeFormatConstructor(locales, options); // 7. Return the result of calling the FormatDateTime abstract operation (defined\n  //    in 12.3.2) with arguments dateTimeFormat and x.\n\n  return FormatDateTime(dateTimeFormat, x);\n};\n\ndefineProperty(Intl, '__applyLocaleSensitivePrototypes', {\n  writable: true,\n  configurable: true,\n  value: function value() {\n    defineProperty(Number.prototype, 'toLocaleString', {\n      writable: true,\n      configurable: true,\n      value: ls.Number.toLocaleString\n    }); // Need this here for IE 8, to avoid the _DontEnum_ bug\n\n    defineProperty(Date.prototype, 'toLocaleString', {\n      writable: true,\n      configurable: true,\n      value: ls.Date.toLocaleString\n    });\n\n    for (var k in ls.Date) {\n      if (hop.call(ls.Date, k)) defineProperty(Date.prototype, k, {\n        writable: true,\n        configurable: true,\n        value: ls.Date[k]\n      });\n    }\n  }\n});\n/**\n * Can't really ship a single script with data for hundreds of locales, so we provide\n * this __addLocaleData method as a means for the developer to add the data on an\n * as-needed basis\n */\n\ndefineProperty(Intl, '__addLocaleData', {\n  value: function value(data) {\n    if (!IsStructurallyValidLanguageTag(data.locale)) throw new Error(\"Object passed doesn't identify itself with a valid language tag\");\n    addLocaleData(data, data.locale);\n  }\n});\n\nfunction addLocaleData(data, tag) {\n  // Both NumberFormat and DateTimeFormat require number data, so throw if it isn't present\n  if (!data.number) throw new Error(\"Object passed doesn't contain locale data for Intl.NumberFormat\");\n  var locale = void 0,\n      locales = [tag],\n      parts = tag.split('-'); // Create fallbacks for locale data with scripts, e.g. Latn, Hans, Vaii, etc\n\n  if (parts.length > 2 && parts[1].length === 4) arrPush.call(locales, parts[0] + '-' + parts[2]);\n\n  while (locale = arrShift.call(locales)) {\n    // Add to NumberFormat internal properties as per 11.2.3\n    arrPush.call(internals.NumberFormat['[[availableLocales]]'], locale);\n    internals.NumberFormat['[[localeData]]'][locale] = data.number; // ...and DateTimeFormat internal properties as per 12.2.3\n\n    if (data.date) {\n      data.date.nu = data.number.nu;\n      arrPush.call(internals.DateTimeFormat['[[availableLocales]]'], locale);\n      internals.DateTimeFormat['[[localeData]]'][locale] = data.date;\n    }\n  } // If this is the first set of locale data added, make it the default\n\n\n  if (defaultLocale === undefined) setDefaultLocale(tag);\n}\n\ndefineProperty(Intl, '__disableRegExpRestore', {\n  value: function value() {\n    internals.disableRegExpRestore = true;\n  }\n});\nmodule.exports = Intl;","// Expose `IntlPolyfill` as global to add locale data into runtime later on.\nglobal.IntlPolyfill = require('./lib/core.js'); // Require all locale data for `Intl`. This module will be\n// ignored when bundling for the browser with Browserify/Webpack.\n\nrequire('./locale-data/complete.js'); // hack to export the polyfill as global Intl if needed\n\n\nif (!global.Intl) {\n  global.Intl = global.IntlPolyfill;\n\n  global.IntlPolyfill.__applyLocaleSensitivePrototypes();\n} // providing an idiomatic api for the nodejs version of this module\n\n\nmodule.exports = global.IntlPolyfill;"],"sourceRoot":""}